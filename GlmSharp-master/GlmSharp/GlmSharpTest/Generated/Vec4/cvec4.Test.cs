using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Numerics;
using System.Linq;
using NUnit.Framework;
using Newtonsoft.Json;
using GlmSharp;

// ReSharper disable InconsistentNaming

namespace GlmSharpTest.Generated.Vec4
{
    [TestFixture]
    public class ComplexVec4Test
    {

        [Test]
        public void Constructors()
        {
            {
                var v = new cvec4(new Complex(3.5d, 8d));
                Assert.AreEqual(new Complex(3.5d, 8d), v.x);
                Assert.AreEqual(new Complex(3.5d, 8d), v.y);
                Assert.AreEqual(new Complex(3.5d, 8d), v.z);
                Assert.AreEqual(new Complex(3.5d, 8d), v.w);
            }
            {
                var v = new cvec4(new Complex(-2d, 1.5d), new Complex(-6.5d, 7d), new Complex(1.5d, -0.5d), new Complex(9.5d, -2d));
                Assert.AreEqual(new Complex(-2d, 1.5d), v.x);
                Assert.AreEqual(new Complex(-6.5d, 7d), v.y);
                Assert.AreEqual(new Complex(1.5d, -0.5d), v.z);
                Assert.AreEqual(new Complex(9.5d, -2d), v.w);
            }
            {
                var v = new cvec4(new cvec2(new Complex(-4d, -4d), new Complex(-2.5d, 5.5d)));
                Assert.AreEqual(new Complex(-4d, -4d), v.x);
                Assert.AreEqual(new Complex(-2.5d, 5.5d), v.y);
                Assert.AreEqual(Complex.Zero, v.z);
                Assert.AreEqual(Complex.Zero, v.w);
            }
            {
                var v = new cvec4(new cvec3(new Complex(8d, 4.5d), new Complex(3d, -7.5d), new Complex(-5.5d, 0.5d)));
                Assert.AreEqual(new Complex(8d, 4.5d), v.x);
                Assert.AreEqual(new Complex(3d, -7.5d), v.y);
                Assert.AreEqual(new Complex(-5.5d, 0.5d), v.z);
                Assert.AreEqual(Complex.Zero, v.w);
            }
            {
                var v = new cvec4(new cvec4(new Complex(8.5d, -3d), new Complex(3d, 3d), new Complex(-1d, -2.5d), new Complex(0.5d, 8d)));
                Assert.AreEqual(new Complex(8.5d, -3d), v.x);
                Assert.AreEqual(new Complex(3d, 3d), v.y);
                Assert.AreEqual(new Complex(-1d, -2.5d), v.z);
                Assert.AreEqual(new Complex(0.5d, 8d), v.w);
            }
        }

        [Test]
        public void Indexer()
        {
            var v = new cvec4(new Complex(3.5d, 4.5d), new Complex(-0.5d, -6.5d), new Complex(6d, 0.5d), new Complex(7.5d, -4.5d));
            Assert.AreEqual(new Complex(3.5d, 4.5d), v[0]);
            Assert.AreEqual(new Complex(-0.5d, -6.5d), v[1]);
            Assert.AreEqual(new Complex(6d, 0.5d), v[2]);
            Assert.AreEqual(new Complex(7.5d, -4.5d), v[3]);
            
            Assert.Throws<ArgumentOutOfRangeException>(() => { var s = v[-2147483648]; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { v[-2147483648] = Complex.Zero; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { var s = v[-1]; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { v[-1] = Complex.Zero; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { var s = v[4]; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { v[4] = Complex.Zero; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { var s = v[2147483647]; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { v[2147483647] = Complex.Zero; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { var s = v[5]; } );
            Assert.Throws<ArgumentOutOfRangeException>(() => { v[5] = Complex.Zero; } );
            
            v[0] = Complex.Zero;
            Assert.AreEqual(Complex.Zero, v[0]);
            v[3] = Complex.One;
            Assert.AreEqual(Complex.One, v[3]);
            v[0] = new Complex(0.0, 0.0);
            Assert.AreEqual(new Complex(0.0, 0.0), v[0]);
            v[0] = new Complex(0.0, 1.0);
            Assert.AreEqual(new Complex(0.0, 1.0), v[0]);
            v[2] = new Complex(0.0, 2d);
            Assert.AreEqual(new Complex(0.0, 2d), v[2]);
            v[3] = new Complex(0.0, 3d);
            Assert.AreEqual(new Complex(0.0, 3d), v[3]);
            v[1] = new Complex(0.0, 4d);
            Assert.AreEqual(new Complex(0.0, 4d), v[1]);
            v[1] = new Complex(0.0, 5d);
            Assert.AreEqual(new Complex(0.0, 5d), v[1]);
            v[0] = new Complex(0.0, 6d);
            Assert.AreEqual(new Complex(0.0, 6d), v[0]);
            v[1] = new Complex(0.0, 7d);
            Assert.AreEqual(new Complex(0.0, 7d), v[1]);
            v[0] = new Complex(0.0, 8d);
            Assert.AreEqual(new Complex(0.0, 8d), v[0]);
            v[2] = new Complex(0.0, 9d);
            Assert.AreEqual(new Complex(0.0, 9d), v[2]);
            v[0] = new Complex(0.0, -1d);
            Assert.AreEqual(new Complex(0.0, -1d), v[0]);
            v[1] = new Complex(0.0, -2d);
            Assert.AreEqual(new Complex(0.0, -2d), v[1]);
            v[2] = new Complex(0.0, -3d);
            Assert.AreEqual(new Complex(0.0, -3d), v[2]);
            v[0] = new Complex(0.0, -4d);
            Assert.AreEqual(new Complex(0.0, -4d), v[0]);
            v[2] = new Complex(0.0, -5d);
            Assert.AreEqual(new Complex(0.0, -5d), v[2]);
            v[3] = new Complex(0.0, -6d);
            Assert.AreEqual(new Complex(0.0, -6d), v[3]);
            v[1] = new Complex(0.0, -7d);
            Assert.AreEqual(new Complex(0.0, -7d), v[1]);
            v[2] = new Complex(0.0, -8d);
            Assert.AreEqual(new Complex(0.0, -8d), v[2]);
            v[0] = new Complex(0.0, -9d);
            Assert.AreEqual(new Complex(0.0, -9d), v[0]);
            v[1] = new Complex(0.0, -9.5d);
            Assert.AreEqual(new Complex(0.0, -9.5d), v[1]);
            v[0] = new Complex(0.0, -8.5d);
            Assert.AreEqual(new Complex(0.0, -8.5d), v[0]);
            v[2] = new Complex(0.0, -7.5d);
            Assert.AreEqual(new Complex(0.0, -7.5d), v[2]);
            v[0] = new Complex(0.0, -6.5d);
            Assert.AreEqual(new Complex(0.0, -6.5d), v[0]);
            v[2] = new Complex(0.0, -5.5d);
            Assert.AreEqual(new Complex(0.0, -5.5d), v[2]);
            v[0] = new Complex(0.0, -4.5d);
            Assert.AreEqual(new Complex(0.0, -4.5d), v[0]);
            v[1] = new Complex(0.0, -3.5d);
            Assert.AreEqual(new Complex(0.0, -3.5d), v[1]);
            v[0] = new Complex(0.0, -2.5d);
            Assert.AreEqual(new Complex(0.0, -2.5d), v[0]);
            v[2] = new Complex(0.0, -1.5d);
            Assert.AreEqual(new Complex(0.0, -1.5d), v[2]);
            v[2] = new Complex(0.0, -0.5d);
            Assert.AreEqual(new Complex(0.0, -0.5d), v[2]);
            v[2] = new Complex(0.0, 0.5d);
            Assert.AreEqual(new Complex(0.0, 0.5d), v[2]);
            v[0] = new Complex(0.0, 1.5d);
            Assert.AreEqual(new Complex(0.0, 1.5d), v[0]);
            v[0] = new Complex(0.0, 2.5d);
            Assert.AreEqual(new Complex(0.0, 2.5d), v[0]);
            v[3] = new Complex(0.0, 3.5d);
            Assert.AreEqual(new Complex(0.0, 3.5d), v[3]);
            v[2] = new Complex(0.0, 4.5d);
            Assert.AreEqual(new Complex(0.0, 4.5d), v[2]);
            v[3] = new Complex(0.0, 5.5d);
            Assert.AreEqual(new Complex(0.0, 5.5d), v[3]);
            v[2] = new Complex(0.0, 6.5d);
            Assert.AreEqual(new Complex(0.0, 6.5d), v[2]);
            v[3] = new Complex(0.0, 7.5d);
            Assert.AreEqual(new Complex(0.0, 7.5d), v[3]);
            v[3] = new Complex(0.0, 8.5d);
            Assert.AreEqual(new Complex(0.0, 8.5d), v[3]);
            v[0] = new Complex(0.0, 9.5d);
            Assert.AreEqual(new Complex(0.0, 9.5d), v[0]);
            v[0] = new Complex(1.0, 0.0);
            Assert.AreEqual(new Complex(1.0, 0.0), v[0]);
            v[1] = new Complex(1.0, 1.0);
            Assert.AreEqual(new Complex(1.0, 1.0), v[1]);
            v[2] = new Complex(1.0, 2d);
            Assert.AreEqual(new Complex(1.0, 2d), v[2]);
            v[2] = new Complex(1.0, 3d);
            Assert.AreEqual(new Complex(1.0, 3d), v[2]);
            v[1] = new Complex(1.0, 4d);
            Assert.AreEqual(new Complex(1.0, 4d), v[1]);
            v[1] = new Complex(1.0, 5d);
            Assert.AreEqual(new Complex(1.0, 5d), v[1]);
            v[0] = new Complex(1.0, 6d);
            Assert.AreEqual(new Complex(1.0, 6d), v[0]);
            v[3] = new Complex(1.0, 7d);
            Assert.AreEqual(new Complex(1.0, 7d), v[3]);
            v[3] = new Complex(1.0, 8d);
            Assert.AreEqual(new Complex(1.0, 8d), v[3]);
            v[1] = new Complex(1.0, 9d);
            Assert.AreEqual(new Complex(1.0, 9d), v[1]);
            v[0] = new Complex(1.0, -1d);
            Assert.AreEqual(new Complex(1.0, -1d), v[0]);
            v[1] = new Complex(1.0, -2d);
            Assert.AreEqual(new Complex(1.0, -2d), v[1]);
            v[1] = new Complex(1.0, -3d);
            Assert.AreEqual(new Complex(1.0, -3d), v[1]);
            v[2] = new Complex(1.0, -4d);
            Assert.AreEqual(new Complex(1.0, -4d), v[2]);
            v[3] = new Complex(1.0, -5d);
            Assert.AreEqual(new Complex(1.0, -5d), v[3]);
            v[3] = new Complex(1.0, -6d);
            Assert.AreEqual(new Complex(1.0, -6d), v[3]);
            v[1] = new Complex(1.0, -7d);
            Assert.AreEqual(new Complex(1.0, -7d), v[1]);
            v[0] = new Complex(1.0, -8d);
            Assert.AreEqual(new Complex(1.0, -8d), v[0]);
            v[3] = new Complex(1.0, -9d);
            Assert.AreEqual(new Complex(1.0, -9d), v[3]);
            v[3] = new Complex(1.0, -9.5d);
            Assert.AreEqual(new Complex(1.0, -9.5d), v[3]);
            v[3] = new Complex(1.0, -8.5d);
            Assert.AreEqual(new Complex(1.0, -8.5d), v[3]);
            v[0] = new Complex(1.0, -7.5d);
            Assert.AreEqual(new Complex(1.0, -7.5d), v[0]);
            v[2] = new Complex(1.0, -6.5d);
            Assert.AreEqual(new Complex(1.0, -6.5d), v[2]);
            v[3] = new Complex(1.0, -5.5d);
            Assert.AreEqual(new Complex(1.0, -5.5d), v[3]);
            v[2] = new Complex(1.0, -4.5d);
            Assert.AreEqual(new Complex(1.0, -4.5d), v[2]);
            v[1] = new Complex(1.0, -3.5d);
            Assert.AreEqual(new Complex(1.0, -3.5d), v[1]);
            v[3] = new Complex(1.0, -2.5d);
            Assert.AreEqual(new Complex(1.0, -2.5d), v[3]);
            v[1] = new Complex(1.0, -1.5d);
            Assert.AreEqual(new Complex(1.0, -1.5d), v[1]);
            v[3] = new Complex(1.0, -0.5d);
            Assert.AreEqual(new Complex(1.0, -0.5d), v[3]);
            v[1] = new Complex(1.0, 0.5d);
            Assert.AreEqual(new Complex(1.0, 0.5d), v[1]);
            v[3] = new Complex(1.0, 1.5d);
            Assert.AreEqual(new Complex(1.0, 1.5d), v[3]);
            v[0] = new Complex(1.0, 2.5d);
            Assert.AreEqual(new Complex(1.0, 2.5d), v[0]);
            v[2] = new Complex(1.0, 3.5d);
            Assert.AreEqual(new Complex(1.0, 3.5d), v[2]);
            v[2] = new Complex(1.0, 4.5d);
            Assert.AreEqual(new Complex(1.0, 4.5d), v[2]);
            v[0] = new Complex(1.0, 5.5d);
            Assert.AreEqual(new Complex(1.0, 5.5d), v[0]);
            v[0] = new Complex(1.0, 6.5d);
            Assert.AreEqual(new Complex(1.0, 6.5d), v[0]);
            v[1] = new Complex(1.0, 7.5d);
            Assert.AreEqual(new Complex(1.0, 7.5d), v[1]);
            v[3] = new Complex(1.0, 8.5d);
            Assert.AreEqual(new Complex(1.0, 8.5d), v[3]);
            v[3] = new Complex(1.0, 9.5d);
            Assert.AreEqual(new Complex(1.0, 9.5d), v[3]);
            v[1] = new Complex(2d, 0.0);
            Assert.AreEqual(new Complex(2d, 0.0), v[1]);
            v[3] = new Complex(2d, 1.0);
            Assert.AreEqual(new Complex(2d, 1.0), v[3]);
            v[1] = new Complex(2d, 2d);
            Assert.AreEqual(new Complex(2d, 2d), v[1]);
            v[1] = new Complex(2d, 3d);
            Assert.AreEqual(new Complex(2d, 3d), v[1]);
            v[1] = new Complex(2d, 4d);
            Assert.AreEqual(new Complex(2d, 4d), v[1]);
            v[2] = new Complex(2d, 5d);
            Assert.AreEqual(new Complex(2d, 5d), v[2]);
            v[0] = new Complex(2d, 6d);
            Assert.AreEqual(new Complex(2d, 6d), v[0]);
            v[3] = new Complex(2d, 7d);
            Assert.AreEqual(new Complex(2d, 7d), v[3]);
            v[1] = new Complex(2d, 8d);
            Assert.AreEqual(new Complex(2d, 8d), v[1]);
            v[0] = new Complex(2d, 9d);
            Assert.AreEqual(new Complex(2d, 9d), v[0]);
            v[2] = new Complex(2d, -1d);
            Assert.AreEqual(new Complex(2d, -1d), v[2]);
            v[2] = new Complex(2d, -2d);
            Assert.AreEqual(new Complex(2d, -2d), v[2]);
            v[2] = new Complex(2d, -3d);
            Assert.AreEqual(new Complex(2d, -3d), v[2]);
            v[3] = new Complex(2d, -4d);
            Assert.AreEqual(new Complex(2d, -4d), v[3]);
            v[0] = new Complex(2d, -5d);
            Assert.AreEqual(new Complex(2d, -5d), v[0]);
            v[0] = new Complex(2d, -6d);
            Assert.AreEqual(new Complex(2d, -6d), v[0]);
            v[3] = new Complex(2d, -7d);
            Assert.AreEqual(new Complex(2d, -7d), v[3]);
            v[3] = new Complex(2d, -8d);
            Assert.AreEqual(new Complex(2d, -8d), v[3]);
            v[3] = new Complex(2d, -9d);
            Assert.AreEqual(new Complex(2d, -9d), v[3]);
            v[3] = new Complex(2d, -9.5d);
            Assert.AreEqual(new Complex(2d, -9.5d), v[3]);
            v[3] = new Complex(2d, -8.5d);
            Assert.AreEqual(new Complex(2d, -8.5d), v[3]);
            v[1] = new Complex(2d, -7.5d);
            Assert.AreEqual(new Complex(2d, -7.5d), v[1]);
            v[3] = new Complex(2d, -6.5d);
            Assert.AreEqual(new Complex(2d, -6.5d), v[3]);
            v[3] = new Complex(2d, -5.5d);
            Assert.AreEqual(new Complex(2d, -5.5d), v[3]);
            v[2] = new Complex(2d, -4.5d);
            Assert.AreEqual(new Complex(2d, -4.5d), v[2]);
            v[1] = new Complex(2d, -3.5d);
            Assert.AreEqual(new Complex(2d, -3.5d), v[1]);
            v[0] = new Complex(2d, -2.5d);
            Assert.AreEqual(new Complex(2d, -2.5d), v[0]);
            v[3] = new Complex(2d, -1.5d);
            Assert.AreEqual(new Complex(2d, -1.5d), v[3]);
            v[2] = new Complex(2d, -0.5d);
            Assert.AreEqual(new Complex(2d, -0.5d), v[2]);
            v[2] = new Complex(2d, 0.5d);
            Assert.AreEqual(new Complex(2d, 0.5d), v[2]);
            v[2] = new Complex(2d, 1.5d);
            Assert.AreEqual(new Complex(2d, 1.5d), v[2]);
            v[1] = new Complex(2d, 2.5d);
            Assert.AreEqual(new Complex(2d, 2.5d), v[1]);
            v[1] = new Complex(2d, 3.5d);
            Assert.AreEqual(new Complex(2d, 3.5d), v[1]);
            v[1] = new Complex(2d, 4.5d);
            Assert.AreEqual(new Complex(2d, 4.5d), v[1]);
            v[2] = new Complex(2d, 5.5d);
            Assert.AreEqual(new Complex(2d, 5.5d), v[2]);
            v[3] = new Complex(2d, 6.5d);
            Assert.AreEqual(new Complex(2d, 6.5d), v[3]);
            v[1] = new Complex(2d, 7.5d);
            Assert.AreEqual(new Complex(2d, 7.5d), v[1]);
            v[3] = new Complex(2d, 8.5d);
            Assert.AreEqual(new Complex(2d, 8.5d), v[3]);
            v[0] = new Complex(2d, 9.5d);
            Assert.AreEqual(new Complex(2d, 9.5d), v[0]);
            v[0] = new Complex(3d, 0.0);
            Assert.AreEqual(new Complex(3d, 0.0), v[0]);
            v[2] = new Complex(3d, 1.0);
            Assert.AreEqual(new Complex(3d, 1.0), v[2]);
            v[2] = new Complex(3d, 2d);
            Assert.AreEqual(new Complex(3d, 2d), v[2]);
            v[2] = new Complex(3d, 3d);
            Assert.AreEqual(new Complex(3d, 3d), v[2]);
            v[1] = new Complex(3d, 4d);
            Assert.AreEqual(new Complex(3d, 4d), v[1]);
            v[1] = new Complex(3d, 5d);
            Assert.AreEqual(new Complex(3d, 5d), v[1]);
            v[3] = new Complex(3d, 6d);
            Assert.AreEqual(new Complex(3d, 6d), v[3]);
            v[1] = new Complex(3d, 7d);
            Assert.AreEqual(new Complex(3d, 7d), v[1]);
            v[0] = new Complex(3d, 8d);
            Assert.AreEqual(new Complex(3d, 8d), v[0]);
            v[1] = new Complex(3d, 9d);
            Assert.AreEqual(new Complex(3d, 9d), v[1]);
            v[2] = new Complex(3d, -1d);
            Assert.AreEqual(new Complex(3d, -1d), v[2]);
            v[0] = new Complex(3d, -2d);
            Assert.AreEqual(new Complex(3d, -2d), v[0]);
            v[1] = new Complex(3d, -3d);
            Assert.AreEqual(new Complex(3d, -3d), v[1]);
            v[2] = new Complex(3d, -4d);
            Assert.AreEqual(new Complex(3d, -4d), v[2]);
            v[0] = new Complex(3d, -5d);
            Assert.AreEqual(new Complex(3d, -5d), v[0]);
            v[3] = new Complex(3d, -6d);
            Assert.AreEqual(new Complex(3d, -6d), v[3]);
            v[0] = new Complex(3d, -7d);
            Assert.AreEqual(new Complex(3d, -7d), v[0]);
            v[0] = new Complex(3d, -8d);
            Assert.AreEqual(new Complex(3d, -8d), v[0]);
            v[2] = new Complex(3d, -9d);
            Assert.AreEqual(new Complex(3d, -9d), v[2]);
            v[3] = new Complex(3d, -9.5d);
            Assert.AreEqual(new Complex(3d, -9.5d), v[3]);
            v[3] = new Complex(3d, -8.5d);
            Assert.AreEqual(new Complex(3d, -8.5d), v[3]);
            v[2] = new Complex(3d, -7.5d);
            Assert.AreEqual(new Complex(3d, -7.5d), v[2]);
            v[1] = new Complex(3d, -6.5d);
            Assert.AreEqual(new Complex(3d, -6.5d), v[1]);
            v[0] = new Complex(3d, -5.5d);
            Assert.AreEqual(new Complex(3d, -5.5d), v[0]);
            v[3] = new Complex(3d, -4.5d);
            Assert.AreEqual(new Complex(3d, -4.5d), v[3]);
            v[1] = new Complex(3d, -3.5d);
            Assert.AreEqual(new Complex(3d, -3.5d), v[1]);
            v[0] = new Complex(3d, -2.5d);
            Assert.AreEqual(new Complex(3d, -2.5d), v[0]);
            v[0] = new Complex(3d, -1.5d);
            Assert.AreEqual(new Complex(3d, -1.5d), v[0]);
            v[0] = new Complex(3d, -0.5d);
            Assert.AreEqual(new Complex(3d, -0.5d), v[0]);
            v[1] = new Complex(3d, 0.5d);
            Assert.AreEqual(new Complex(3d, 0.5d), v[1]);
            v[0] = new Complex(3d, 1.5d);
            Assert.AreEqual(new Complex(3d, 1.5d), v[0]);
            v[2] = new Complex(3d, 2.5d);
            Assert.AreEqual(new Complex(3d, 2.5d), v[2]);
            v[0] = new Complex(3d, 3.5d);
            Assert.AreEqual(new Complex(3d, 3.5d), v[0]);
            v[2] = new Complex(3d, 4.5d);
            Assert.AreEqual(new Complex(3d, 4.5d), v[2]);
            v[2] = new Complex(3d, 5.5d);
            Assert.AreEqual(new Complex(3d, 5.5d), v[2]);
            v[1] = new Complex(3d, 6.5d);
            Assert.AreEqual(new Complex(3d, 6.5d), v[1]);
            v[1] = new Complex(3d, 7.5d);
            Assert.AreEqual(new Complex(3d, 7.5d), v[1]);
            v[3] = new Complex(3d, 8.5d);
            Assert.AreEqual(new Complex(3d, 8.5d), v[3]);
            v[1] = new Complex(3d, 9.5d);
            Assert.AreEqual(new Complex(3d, 9.5d), v[1]);
            v[2] = new Complex(4d, 0.0);
            Assert.AreEqual(new Complex(4d, 0.0), v[2]);
            v[3] = new Complex(4d, 1.0);
            Assert.AreEqual(new Complex(4d, 1.0), v[3]);
            v[0] = new Complex(4d, 2d);
            Assert.AreEqual(new Complex(4d, 2d), v[0]);
            v[3] = new Complex(4d, 3d);
            Assert.AreEqual(new Complex(4d, 3d), v[3]);
            v[1] = new Complex(4d, 4d);
            Assert.AreEqual(new Complex(4d, 4d), v[1]);
            v[0] = new Complex(4d, 5d);
            Assert.AreEqual(new Complex(4d, 5d), v[0]);
            v[1] = new Complex(4d, 6d);
            Assert.AreEqual(new Complex(4d, 6d), v[1]);
            v[1] = new Complex(4d, 7d);
            Assert.AreEqual(new Complex(4d, 7d), v[1]);
            v[3] = new Complex(4d, 8d);
            Assert.AreEqual(new Complex(4d, 8d), v[3]);
            v[1] = new Complex(4d, 9d);
            Assert.AreEqual(new Complex(4d, 9d), v[1]);
            v[2] = new Complex(4d, -1d);
            Assert.AreEqual(new Complex(4d, -1d), v[2]);
            v[1] = new Complex(4d, -2d);
            Assert.AreEqual(new Complex(4d, -2d), v[1]);
            v[3] = new Complex(4d, -3d);
            Assert.AreEqual(new Complex(4d, -3d), v[3]);
            v[3] = new Complex(4d, -4d);
            Assert.AreEqual(new Complex(4d, -4d), v[3]);
            v[0] = new Complex(4d, -5d);
            Assert.AreEqual(new Complex(4d, -5d), v[0]);
            v[0] = new Complex(4d, -6d);
            Assert.AreEqual(new Complex(4d, -6d), v[0]);
            v[2] = new Complex(4d, -7d);
            Assert.AreEqual(new Complex(4d, -7d), v[2]);
            v[0] = new Complex(4d, -8d);
            Assert.AreEqual(new Complex(4d, -8d), v[0]);
            v[1] = new Complex(4d, -9d);
            Assert.AreEqual(new Complex(4d, -9d), v[1]);
            v[2] = new Complex(4d, -9.5d);
            Assert.AreEqual(new Complex(4d, -9.5d), v[2]);
            v[3] = new Complex(4d, -8.5d);
            Assert.AreEqual(new Complex(4d, -8.5d), v[3]);
            v[0] = new Complex(4d, -7.5d);
            Assert.AreEqual(new Complex(4d, -7.5d), v[0]);
            v[2] = new Complex(4d, -6.5d);
            Assert.AreEqual(new Complex(4d, -6.5d), v[2]);
            v[0] = new Complex(4d, -5.5d);
            Assert.AreEqual(new Complex(4d, -5.5d), v[0]);
            v[2] = new Complex(4d, -4.5d);
            Assert.AreEqual(new Complex(4d, -4.5d), v[2]);
            v[1] = new Complex(4d, -3.5d);
            Assert.AreEqual(new Complex(4d, -3.5d), v[1]);
            v[3] = new Complex(4d, -2.5d);
            Assert.AreEqual(new Complex(4d, -2.5d), v[3]);
            v[0] = new Complex(4d, -1.5d);
            Assert.AreEqual(new Complex(4d, -1.5d), v[0]);
            v[2] = new Complex(4d, -0.5d);
            Assert.AreEqual(new Complex(4d, -0.5d), v[2]);
            v[0] = new Complex(4d, 0.5d);
            Assert.AreEqual(new Complex(4d, 0.5d), v[0]);
            v[2] = new Complex(4d, 1.5d);
            Assert.AreEqual(new Complex(4d, 1.5d), v[2]);
            v[1] = new Complex(4d, 2.5d);
            Assert.AreEqual(new Complex(4d, 2.5d), v[1]);
            v[1] = new Complex(4d, 3.5d);
            Assert.AreEqual(new Complex(4d, 3.5d), v[1]);
            v[2] = new Complex(4d, 4.5d);
            Assert.AreEqual(new Complex(4d, 4.5d), v[2]);
            v[3] = new Complex(4d, 5.5d);
            Assert.AreEqual(new Complex(4d, 5.5d), v[3]);
            v[3] = new Complex(4d, 6.5d);
            Assert.AreEqual(new Complex(4d, 6.5d), v[3]);
            v[3] = new Complex(4d, 7.5d);
            Assert.AreEqual(new Complex(4d, 7.5d), v[3]);
            v[2] = new Complex(4d, 8.5d);
            Assert.AreEqual(new Complex(4d, 8.5d), v[2]);
            v[0] = new Complex(4d, 9.5d);
            Assert.AreEqual(new Complex(4d, 9.5d), v[0]);
            v[3] = new Complex(5d, 0.0);
            Assert.AreEqual(new Complex(5d, 0.0), v[3]);
            v[1] = new Complex(5d, 1.0);
            Assert.AreEqual(new Complex(5d, 1.0), v[1]);
            v[0] = new Complex(5d, 2d);
            Assert.AreEqual(new Complex(5d, 2d), v[0]);
            v[1] = new Complex(5d, 3d);
            Assert.AreEqual(new Complex(5d, 3d), v[1]);
            v[2] = new Complex(5d, 4d);
            Assert.AreEqual(new Complex(5d, 4d), v[2]);
            v[2] = new Complex(5d, 5d);
            Assert.AreEqual(new Complex(5d, 5d), v[2]);
            v[3] = new Complex(5d, 6d);
            Assert.AreEqual(new Complex(5d, 6d), v[3]);
            v[1] = new Complex(5d, 7d);
            Assert.AreEqual(new Complex(5d, 7d), v[1]);
            v[3] = new Complex(5d, 8d);
            Assert.AreEqual(new Complex(5d, 8d), v[3]);
            v[0] = new Complex(5d, 9d);
            Assert.AreEqual(new Complex(5d, 9d), v[0]);
            v[1] = new Complex(5d, -1d);
            Assert.AreEqual(new Complex(5d, -1d), v[1]);
            v[0] = new Complex(5d, -2d);
            Assert.AreEqual(new Complex(5d, -2d), v[0]);
            v[0] = new Complex(5d, -3d);
            Assert.AreEqual(new Complex(5d, -3d), v[0]);
            v[0] = new Complex(5d, -4d);
            Assert.AreEqual(new Complex(5d, -4d), v[0]);
            v[0] = new Complex(5d, -5d);
            Assert.AreEqual(new Complex(5d, -5d), v[0]);
            v[2] = new Complex(5d, -6d);
            Assert.AreEqual(new Complex(5d, -6d), v[2]);
            v[2] = new Complex(5d, -7d);
            Assert.AreEqual(new Complex(5d, -7d), v[2]);
            v[0] = new Complex(5d, -8d);
            Assert.AreEqual(new Complex(5d, -8d), v[0]);
            v[3] = new Complex(5d, -9d);
            Assert.AreEqual(new Complex(5d, -9d), v[3]);
            v[0] = new Complex(5d, -9.5d);
            Assert.AreEqual(new Complex(5d, -9.5d), v[0]);
            v[3] = new Complex(5d, -8.5d);
            Assert.AreEqual(new Complex(5d, -8.5d), v[3]);
            v[1] = new Complex(5d, -7.5d);
            Assert.AreEqual(new Complex(5d, -7.5d), v[1]);
            v[0] = new Complex(5d, -6.5d);
            Assert.AreEqual(new Complex(5d, -6.5d), v[0]);
            v[2] = new Complex(5d, -5.5d);
            Assert.AreEqual(new Complex(5d, -5.5d), v[2]);
            v[3] = new Complex(5d, -4.5d);
            Assert.AreEqual(new Complex(5d, -4.5d), v[3]);
            v[3] = new Complex(5d, -3.5d);
            Assert.AreEqual(new Complex(5d, -3.5d), v[3]);
            v[0] = new Complex(5d, -2.5d);
            Assert.AreEqual(new Complex(5d, -2.5d), v[0]);
            v[0] = new Complex(5d, -1.5d);
            Assert.AreEqual(new Complex(5d, -1.5d), v[0]);
            v[0] = new Complex(5d, -0.5d);
            Assert.AreEqual(new Complex(5d, -0.5d), v[0]);
            v[3] = new Complex(5d, 0.5d);
            Assert.AreEqual(new Complex(5d, 0.5d), v[3]);
            v[0] = new Complex(5d, 1.5d);
            Assert.AreEqual(new Complex(5d, 1.5d), v[0]);
            v[0] = new Complex(5d, 2.5d);
            Assert.AreEqual(new Complex(5d, 2.5d), v[0]);
            v[3] = new Complex(5d, 3.5d);
            Assert.AreEqual(new Complex(5d, 3.5d), v[3]);
            v[0] = new Complex(5d, 4.5d);
            Assert.AreEqual(new Complex(5d, 4.5d), v[0]);
            v[2] = new Complex(5d, 5.5d);
            Assert.AreEqual(new Complex(5d, 5.5d), v[2]);
            v[1] = new Complex(5d, 6.5d);
            Assert.AreEqual(new Complex(5d, 6.5d), v[1]);
            v[2] = new Complex(5d, 7.5d);
            Assert.AreEqual(new Complex(5d, 7.5d), v[2]);
            v[2] = new Complex(5d, 8.5d);
            Assert.AreEqual(new Complex(5d, 8.5d), v[2]);
            v[0] = new Complex(5d, 9.5d);
            Assert.AreEqual(new Complex(5d, 9.5d), v[0]);
            v[1] = new Complex(6d, 0.0);
            Assert.AreEqual(new Complex(6d, 0.0), v[1]);
            v[3] = new Complex(6d, 1.0);
            Assert.AreEqual(new Complex(6d, 1.0), v[3]);
            v[0] = new Complex(6d, 2d);
            Assert.AreEqual(new Complex(6d, 2d), v[0]);
            v[3] = new Complex(6d, 3d);
            Assert.AreEqual(new Complex(6d, 3d), v[3]);
            v[0] = new Complex(6d, 4d);
            Assert.AreEqual(new Complex(6d, 4d), v[0]);
            v[0] = new Complex(6d, 5d);
            Assert.AreEqual(new Complex(6d, 5d), v[0]);
            v[0] = new Complex(6d, 6d);
            Assert.AreEqual(new Complex(6d, 6d), v[0]);
            v[2] = new Complex(6d, 7d);
            Assert.AreEqual(new Complex(6d, 7d), v[2]);
            v[1] = new Complex(6d, 8d);
            Assert.AreEqual(new Complex(6d, 8d), v[1]);
            v[1] = new Complex(6d, 9d);
            Assert.AreEqual(new Complex(6d, 9d), v[1]);
            v[3] = new Complex(6d, -1d);
            Assert.AreEqual(new Complex(6d, -1d), v[3]);
            v[1] = new Complex(6d, -2d);
            Assert.AreEqual(new Complex(6d, -2d), v[1]);
            v[3] = new Complex(6d, -3d);
            Assert.AreEqual(new Complex(6d, -3d), v[3]);
            v[3] = new Complex(6d, -4d);
            Assert.AreEqual(new Complex(6d, -4d), v[3]);
            v[2] = new Complex(6d, -5d);
            Assert.AreEqual(new Complex(6d, -5d), v[2]);
            v[0] = new Complex(6d, -6d);
            Assert.AreEqual(new Complex(6d, -6d), v[0]);
            v[2] = new Complex(6d, -7d);
            Assert.AreEqual(new Complex(6d, -7d), v[2]);
            v[0] = new Complex(6d, -8d);
            Assert.AreEqual(new Complex(6d, -8d), v[0]);
            v[1] = new Complex(6d, -9d);
            Assert.AreEqual(new Complex(6d, -9d), v[1]);
            v[2] = new Complex(6d, -9.5d);
            Assert.AreEqual(new Complex(6d, -9.5d), v[2]);
            v[2] = new Complex(6d, -8.5d);
            Assert.AreEqual(new Complex(6d, -8.5d), v[2]);
            v[2] = new Complex(6d, -7.5d);
            Assert.AreEqual(new Complex(6d, -7.5d), v[2]);
            v[3] = new Complex(6d, -6.5d);
            Assert.AreEqual(new Complex(6d, -6.5d), v[3]);
            v[0] = new Complex(6d, -5.5d);
            Assert.AreEqual(new Complex(6d, -5.5d), v[0]);
            v[3] = new Complex(6d, -4.5d);
            Assert.AreEqual(new Complex(6d, -4.5d), v[3]);
            v[3] = new Complex(6d, -3.5d);
            Assert.AreEqual(new Complex(6d, -3.5d), v[3]);
            v[1] = new Complex(6d, -2.5d);
            Assert.AreEqual(new Complex(6d, -2.5d), v[1]);
            v[0] = new Complex(6d, -1.5d);
            Assert.AreEqual(new Complex(6d, -1.5d), v[0]);
            v[3] = new Complex(6d, -0.5d);
            Assert.AreEqual(new Complex(6d, -0.5d), v[3]);
            v[1] = new Complex(6d, 0.5d);
            Assert.AreEqual(new Complex(6d, 0.5d), v[1]);
            v[3] = new Complex(6d, 1.5d);
            Assert.AreEqual(new Complex(6d, 1.5d), v[3]);
            v[3] = new Complex(6d, 2.5d);
            Assert.AreEqual(new Complex(6d, 2.5d), v[3]);
            v[3] = new Complex(6d, 3.5d);
            Assert.AreEqual(new Complex(6d, 3.5d), v[3]);
            v[3] = new Complex(6d, 4.5d);
            Assert.AreEqual(new Complex(6d, 4.5d), v[3]);
            v[2] = new Complex(6d, 5.5d);
            Assert.AreEqual(new Complex(6d, 5.5d), v[2]);
            v[1] = new Complex(6d, 6.5d);
            Assert.AreEqual(new Complex(6d, 6.5d), v[1]);
            v[3] = new Complex(6d, 7.5d);
            Assert.AreEqual(new Complex(6d, 7.5d), v[3]);
            v[1] = new Complex(6d, 8.5d);
            Assert.AreEqual(new Complex(6d, 8.5d), v[1]);
            v[0] = new Complex(6d, 9.5d);
            Assert.AreEqual(new Complex(6d, 9.5d), v[0]);
            v[1] = new Complex(7d, 0.0);
            Assert.AreEqual(new Complex(7d, 0.0), v[1]);
            v[3] = new Complex(7d, 1.0);
            Assert.AreEqual(new Complex(7d, 1.0), v[3]);
            v[1] = new Complex(7d, 2d);
            Assert.AreEqual(new Complex(7d, 2d), v[1]);
            v[3] = new Complex(7d, 3d);
            Assert.AreEqual(new Complex(7d, 3d), v[3]);
            v[3] = new Complex(7d, 4d);
            Assert.AreEqual(new Complex(7d, 4d), v[3]);
            v[1] = new Complex(7d, 5d);
            Assert.AreEqual(new Complex(7d, 5d), v[1]);
            v[2] = new Complex(7d, 6d);
            Assert.AreEqual(new Complex(7d, 6d), v[2]);
            v[0] = new Complex(7d, 7d);
            Assert.AreEqual(new Complex(7d, 7d), v[0]);
            v[0] = new Complex(7d, 8d);
            Assert.AreEqual(new Complex(7d, 8d), v[0]);
            v[1] = new Complex(7d, 9d);
            Assert.AreEqual(new Complex(7d, 9d), v[1]);
            v[0] = new Complex(7d, -1d);
            Assert.AreEqual(new Complex(7d, -1d), v[0]);
            v[3] = new Complex(7d, -2d);
            Assert.AreEqual(new Complex(7d, -2d), v[3]);
            v[0] = new Complex(7d, -3d);
            Assert.AreEqual(new Complex(7d, -3d), v[0]);
            v[1] = new Complex(7d, -4d);
            Assert.AreEqual(new Complex(7d, -4d), v[1]);
            v[0] = new Complex(7d, -5d);
            Assert.AreEqual(new Complex(7d, -5d), v[0]);
            v[1] = new Complex(7d, -6d);
            Assert.AreEqual(new Complex(7d, -6d), v[1]);
            v[3] = new Complex(7d, -7d);
            Assert.AreEqual(new Complex(7d, -7d), v[3]);
            v[3] = new Complex(7d, -8d);
            Assert.AreEqual(new Complex(7d, -8d), v[3]);
            v[0] = new Complex(7d, -9d);
            Assert.AreEqual(new Complex(7d, -9d), v[0]);
            v[0] = new Complex(7d, -9.5d);
            Assert.AreEqual(new Complex(7d, -9.5d), v[0]);
            v[0] = new Complex(7d, -8.5d);
            Assert.AreEqual(new Complex(7d, -8.5d), v[0]);
            v[3] = new Complex(7d, -7.5d);
            Assert.AreEqual(new Complex(7d, -7.5d), v[3]);
            v[3] = new Complex(7d, -6.5d);
            Assert.AreEqual(new Complex(7d, -6.5d), v[3]);
            v[2] = new Complex(7d, -5.5d);
            Assert.AreEqual(new Complex(7d, -5.5d), v[2]);
            v[3] = new Complex(7d, -4.5d);
            Assert.AreEqual(new Complex(7d, -4.5d), v[3]);
            v[1] = new Complex(7d, -3.5d);
            Assert.AreEqual(new Complex(7d, -3.5d), v[1]);
            v[0] = new Complex(7d, -2.5d);
            Assert.AreEqual(new Complex(7d, -2.5d), v[0]);
            v[1] = new Complex(7d, -1.5d);
            Assert.AreEqual(new Complex(7d, -1.5d), v[1]);
            v[0] = new Complex(7d, -0.5d);
            Assert.AreEqual(new Complex(7d, -0.5d), v[0]);
            v[1] = new Complex(7d, 0.5d);
            Assert.AreEqual(new Complex(7d, 0.5d), v[1]);
            v[0] = new Complex(7d, 1.5d);
            Assert.AreEqual(new Complex(7d, 1.5d), v[0]);
            v[0] = new Complex(7d, 2.5d);
            Assert.AreEqual(new Complex(7d, 2.5d), v[0]);
            v[0] = new Complex(7d, 3.5d);
            Assert.AreEqual(new Complex(7d, 3.5d), v[0]);
            v[0] = new Complex(7d, 4.5d);
            Assert.AreEqual(new Complex(7d, 4.5d), v[0]);
            v[3] = new Complex(7d, 5.5d);
            Assert.AreEqual(new Complex(7d, 5.5d), v[3]);
            v[3] = new Complex(7d, 6.5d);
            Assert.AreEqual(new Complex(7d, 6.5d), v[3]);
            v[1] = new Complex(7d, 7.5d);
            Assert.AreEqual(new Complex(7d, 7.5d), v[1]);
            v[3] = new Complex(7d, 8.5d);
            Assert.AreEqual(new Complex(7d, 8.5d), v[3]);
            v[0] = new Complex(7d, 9.5d);
            Assert.AreEqual(new Complex(7d, 9.5d), v[0]);
            v[2] = new Complex(8d, 0.0);
            Assert.AreEqual(new Complex(8d, 0.0), v[2]);
            v[0] = new Complex(8d, 1.0);
            Assert.AreEqual(new Complex(8d, 1.0), v[0]);
            v[2] = new Complex(8d, 2d);
            Assert.AreEqual(new Complex(8d, 2d), v[2]);
            v[0] = new Complex(8d, 3d);
            Assert.AreEqual(new Complex(8d, 3d), v[0]);
            v[3] = new Complex(8d, 4d);
            Assert.AreEqual(new Complex(8d, 4d), v[3]);
            v[3] = new Complex(8d, 5d);
            Assert.AreEqual(new Complex(8d, 5d), v[3]);
            v[2] = new Complex(8d, 6d);
            Assert.AreEqual(new Complex(8d, 6d), v[2]);
            v[3] = new Complex(8d, 7d);
            Assert.AreEqual(new Complex(8d, 7d), v[3]);
            v[2] = new Complex(8d, 8d);
            Assert.AreEqual(new Complex(8d, 8d), v[2]);
            v[3] = new Complex(8d, 9d);
            Assert.AreEqual(new Complex(8d, 9d), v[3]);
            v[1] = new Complex(8d, -1d);
            Assert.AreEqual(new Complex(8d, -1d), v[1]);
            v[2] = new Complex(8d, -2d);
            Assert.AreEqual(new Complex(8d, -2d), v[2]);
            v[2] = new Complex(8d, -3d);
            Assert.AreEqual(new Complex(8d, -3d), v[2]);
            v[3] = new Complex(8d, -4d);
            Assert.AreEqual(new Complex(8d, -4d), v[3]);
            v[1] = new Complex(8d, -5d);
            Assert.AreEqual(new Complex(8d, -5d), v[1]);
            v[3] = new Complex(8d, -6d);
            Assert.AreEqual(new Complex(8d, -6d), v[3]);
            v[2] = new Complex(8d, -7d);
            Assert.AreEqual(new Complex(8d, -7d), v[2]);
            v[3] = new Complex(8d, -8d);
            Assert.AreEqual(new Complex(8d, -8d), v[3]);
            v[2] = new Complex(8d, -9d);
            Assert.AreEqual(new Complex(8d, -9d), v[2]);
            v[3] = new Complex(8d, -9.5d);
            Assert.AreEqual(new Complex(8d, -9.5d), v[3]);
            v[1] = new Complex(8d, -8.5d);
            Assert.AreEqual(new Complex(8d, -8.5d), v[1]);
            v[1] = new Complex(8d, -7.5d);
            Assert.AreEqual(new Complex(8d, -7.5d), v[1]);
            v[1] = new Complex(8d, -6.5d);
            Assert.AreEqual(new Complex(8d, -6.5d), v[1]);
            v[0] = new Complex(8d, -5.5d);
            Assert.AreEqual(new Complex(8d, -5.5d), v[0]);
            v[3] = new Complex(8d, -4.5d);
            Assert.AreEqual(new Complex(8d, -4.5d), v[3]);
            v[0] = new Complex(8d, -3.5d);
            Assert.AreEqual(new Complex(8d, -3.5d), v[0]);
            v[0] = new Complex(8d, -2.5d);
            Assert.AreEqual(new Complex(8d, -2.5d), v[0]);
            v[3] = new Complex(8d, -1.5d);
            Assert.AreEqual(new Complex(8d, -1.5d), v[3]);
            v[3] = new Complex(8d, -0.5d);
            Assert.AreEqual(new Complex(8d, -0.5d), v[3]);
            v[1] = new Complex(8d, 0.5d);
            Assert.AreEqual(new Complex(8d, 0.5d), v[1]);
            v[0] = new Complex(8d, 1.5d);
            Assert.AreEqual(new Complex(8d, 1.5d), v[0]);
            v[0] = new Complex(8d, 2.5d);
            Assert.AreEqual(new Complex(8d, 2.5d), v[0]);
            v[0] = new Complex(8d, 3.5d);
            Assert.AreEqual(new Complex(8d, 3.5d), v[0]);
            v[2] = new Complex(8d, 4.5d);
            Assert.AreEqual(new Complex(8d, 4.5d), v[2]);
            v[1] = new Complex(8d, 5.5d);
            Assert.AreEqual(new Complex(8d, 5.5d), v[1]);
            v[3] = new Complex(8d, 6.5d);
            Assert.AreEqual(new Complex(8d, 6.5d), v[3]);
            v[1] = new Complex(8d, 7.5d);
            Assert.AreEqual(new Complex(8d, 7.5d), v[1]);
            v[3] = new Complex(8d, 8.5d);
            Assert.AreEqual(new Complex(8d, 8.5d), v[3]);
            v[0] = new Complex(8d, 9.5d);
            Assert.AreEqual(new Complex(8d, 9.5d), v[0]);
            v[3] = new Complex(9d, 0.0);
            Assert.AreEqual(new Complex(9d, 0.0), v[3]);
            v[1] = new Complex(9d, 1.0);
            Assert.AreEqual(new Complex(9d, 1.0), v[1]);
            v[2] = new Complex(9d, 2d);
            Assert.AreEqual(new Complex(9d, 2d), v[2]);
            v[1] = new Complex(9d, 3d);
            Assert.AreEqual(new Complex(9d, 3d), v[1]);
            v[1] = new Complex(9d, 4d);
            Assert.AreEqual(new Complex(9d, 4d), v[1]);
            v[2] = new Complex(9d, 5d);
            Assert.AreEqual(new Complex(9d, 5d), v[2]);
            v[3] = new Complex(9d, 6d);
            Assert.AreEqual(new Complex(9d, 6d), v[3]);
            v[2] = new Complex(9d, 7d);
            Assert.AreEqual(new Complex(9d, 7d), v[2]);
            v[1] = new Complex(9d, 8d);
            Assert.AreEqual(new Complex(9d, 8d), v[1]);
            v[3] = new Complex(9d, 9d);
            Assert.AreEqual(new Complex(9d, 9d), v[3]);
            v[0] = new Complex(9d, -1d);
            Assert.AreEqual(new Complex(9d, -1d), v[0]);
            v[1] = new Complex(9d, -2d);
            Assert.AreEqual(new Complex(9d, -2d), v[1]);
            v[0] = new Complex(9d, -3d);
            Assert.AreEqual(new Complex(9d, -3d), v[0]);
            v[2] = new Complex(9d, -4d);
            Assert.AreEqual(new Complex(9d, -4d), v[2]);
            v[3] = new Complex(9d, -5d);
            Assert.AreEqual(new Complex(9d, -5d), v[3]);
            v[3] = new Complex(9d, -6d);
            Assert.AreEqual(new Complex(9d, -6d), v[3]);
            v[1] = new Complex(9d, -7d);
            Assert.AreEqual(new Complex(9d, -7d), v[1]);
            v[3] = new Complex(9d, -8d);
            Assert.AreEqual(new Complex(9d, -8d), v[3]);
            v[2] = new Complex(9d, -9d);
            Assert.AreEqual(new Complex(9d, -9d), v[2]);
            v[1] = new Complex(9d, -9.5d);
            Assert.AreEqual(new Complex(9d, -9.5d), v[1]);
            v[2] = new Complex(9d, -8.5d);
            Assert.AreEqual(new Complex(9d, -8.5d), v[2]);
            v[2] = new Complex(9d, -7.5d);
            Assert.AreEqual(new Complex(9d, -7.5d), v[2]);
            v[2] = new Complex(9d, -6.5d);
            Assert.AreEqual(new Complex(9d, -6.5d), v[2]);
            v[3] = new Complex(9d, -5.5d);
            Assert.AreEqual(new Complex(9d, -5.5d), v[3]);
            v[0] = new Complex(9d, -4.5d);
            Assert.AreEqual(new Complex(9d, -4.5d), v[0]);
            v[3] = new Complex(9d, -3.5d);
            Assert.AreEqual(new Complex(9d, -3.5d), v[3]);
            v[1] = new Complex(9d, -2.5d);
            Assert.AreEqual(new Complex(9d, -2.5d), v[1]);
            v[1] = new Complex(9d, -1.5d);
            Assert.AreEqual(new Complex(9d, -1.5d), v[1]);
            v[3] = new Complex(9d, -0.5d);
            Assert.AreEqual(new Complex(9d, -0.5d), v[3]);
            v[2] = new Complex(9d, 0.5d);
            Assert.AreEqual(new Complex(9d, 0.5d), v[2]);
            v[1] = new Complex(9d, 1.5d);
            Assert.AreEqual(new Complex(9d, 1.5d), v[1]);
            v[2] = new Complex(9d, 2.5d);
            Assert.AreEqual(new Complex(9d, 2.5d), v[2]);
            v[2] = new Complex(9d, 3.5d);
            Assert.AreEqual(new Complex(9d, 3.5d), v[2]);
            v[2] = new Complex(9d, 4.5d);
            Assert.AreEqual(new Complex(9d, 4.5d), v[2]);
            v[3] = new Complex(9d, 5.5d);
            Assert.AreEqual(new Complex(9d, 5.5d), v[3]);
            v[1] = new Complex(9d, 6.5d);
            Assert.AreEqual(new Complex(9d, 6.5d), v[1]);
            v[2] = new Complex(9d, 7.5d);
            Assert.AreEqual(new Complex(9d, 7.5d), v[2]);
            v[3] = new Complex(9d, 8.5d);
            Assert.AreEqual(new Complex(9d, 8.5d), v[3]);
            v[3] = new Complex(9d, 9.5d);
            Assert.AreEqual(new Complex(9d, 9.5d), v[3]);
            v[2] = new Complex(-1d, 0.0);
            Assert.AreEqual(new Complex(-1d, 0.0), v[2]);
            v[3] = new Complex(-1d, 1.0);
            Assert.AreEqual(new Complex(-1d, 1.0), v[3]);
            v[2] = new Complex(-1d, 2d);
            Assert.AreEqual(new Complex(-1d, 2d), v[2]);
            v[3] = new Complex(-1d, 3d);
            Assert.AreEqual(new Complex(-1d, 3d), v[3]);
            v[3] = new Complex(-1d, 4d);
            Assert.AreEqual(new Complex(-1d, 4d), v[3]);
            v[3] = new Complex(-1d, 5d);
            Assert.AreEqual(new Complex(-1d, 5d), v[3]);
            v[0] = new Complex(-1d, 6d);
            Assert.AreEqual(new Complex(-1d, 6d), v[0]);
            v[0] = new Complex(-1d, 7d);
            Assert.AreEqual(new Complex(-1d, 7d), v[0]);
            v[1] = new Complex(-1d, 8d);
            Assert.AreEqual(new Complex(-1d, 8d), v[1]);
            v[1] = new Complex(-1d, 9d);
            Assert.AreEqual(new Complex(-1d, 9d), v[1]);
            v[3] = new Complex(-1d, -1d);
            Assert.AreEqual(new Complex(-1d, -1d), v[3]);
            v[3] = new Complex(-1d, -2d);
            Assert.AreEqual(new Complex(-1d, -2d), v[3]);
            v[0] = new Complex(-1d, -3d);
            Assert.AreEqual(new Complex(-1d, -3d), v[0]);
            v[3] = new Complex(-1d, -4d);
            Assert.AreEqual(new Complex(-1d, -4d), v[3]);
            v[2] = new Complex(-1d, -5d);
            Assert.AreEqual(new Complex(-1d, -5d), v[2]);
            v[2] = new Complex(-1d, -6d);
            Assert.AreEqual(new Complex(-1d, -6d), v[2]);
            v[0] = new Complex(-1d, -7d);
            Assert.AreEqual(new Complex(-1d, -7d), v[0]);
            v[2] = new Complex(-1d, -8d);
            Assert.AreEqual(new Complex(-1d, -8d), v[2]);
            v[3] = new Complex(-1d, -9d);
            Assert.AreEqual(new Complex(-1d, -9d), v[3]);
            v[0] = new Complex(-1d, -9.5d);
            Assert.AreEqual(new Complex(-1d, -9.5d), v[0]);
            v[2] = new Complex(-1d, -8.5d);
            Assert.AreEqual(new Complex(-1d, -8.5d), v[2]);
            v[0] = new Complex(-1d, -7.5d);
            Assert.AreEqual(new Complex(-1d, -7.5d), v[0]);
            v[2] = new Complex(-1d, -6.5d);
            Assert.AreEqual(new Complex(-1d, -6.5d), v[2]);
            v[3] = new Complex(-1d, -5.5d);
            Assert.AreEqual(new Complex(-1d, -5.5d), v[3]);
            v[2] = new Complex(-1d, -4.5d);
            Assert.AreEqual(new Complex(-1d, -4.5d), v[2]);
            v[2] = new Complex(-1d, -3.5d);
            Assert.AreEqual(new Complex(-1d, -3.5d), v[2]);
            v[2] = new Complex(-1d, -2.5d);
            Assert.AreEqual(new Complex(-1d, -2.5d), v[2]);
            v[2] = new Complex(-1d, -1.5d);
            Assert.AreEqual(new Complex(-1d, -1.5d), v[2]);
            v[1] = new Complex(-1d, -0.5d);
            Assert.AreEqual(new Complex(-1d, -0.5d), v[1]);
            v[3] = new Complex(-1d, 0.5d);
            Assert.AreEqual(new Complex(-1d, 0.5d), v[3]);
            v[1] = new Complex(-1d, 1.5d);
            Assert.AreEqual(new Complex(-1d, 1.5d), v[1]);
            v[0] = new Complex(-1d, 2.5d);
            Assert.AreEqual(new Complex(-1d, 2.5d), v[0]);
            v[2] = new Complex(-1d, 3.5d);
            Assert.AreEqual(new Complex(-1d, 3.5d), v[2]);
            v[3] = new Complex(-1d, 4.5d);
            Assert.AreEqual(new Complex(-1d, 4.5d), v[3]);
            v[3] = new Complex(-1d, 5.5d);
            Assert.AreEqual(new Complex(-1d, 5.5d), v[3]);
            v[1] = new Complex(-1d, 6.5d);
            Assert.AreEqual(new Complex(-1d, 6.5d), v[1]);
            v[3] = new Complex(-1d, 7.5d);
            Assert.AreEqual(new Complex(-1d, 7.5d), v[3]);
            v[3] = new Complex(-1d, 8.5d);
            Assert.AreEqual(new Complex(-1d, 8.5d), v[3]);
            v[3] = new Complex(-1d, 9.5d);
            Assert.AreEqual(new Complex(-1d, 9.5d), v[3]);
            v[0] = new Complex(-2d, 0.0);
            Assert.AreEqual(new Complex(-2d, 0.0), v[0]);
            v[0] = new Complex(-2d, 1.0);
            Assert.AreEqual(new Complex(-2d, 1.0), v[0]);
            v[2] = new Complex(-2d, 2d);
            Assert.AreEqual(new Complex(-2d, 2d), v[2]);
            v[0] = new Complex(-2d, 3d);
            Assert.AreEqual(new Complex(-2d, 3d), v[0]);
            v[0] = new Complex(-2d, 4d);
            Assert.AreEqual(new Complex(-2d, 4d), v[0]);
            v[3] = new Complex(-2d, 5d);
            Assert.AreEqual(new Complex(-2d, 5d), v[3]);
            v[3] = new Complex(-2d, 6d);
            Assert.AreEqual(new Complex(-2d, 6d), v[3]);
            v[1] = new Complex(-2d, 7d);
            Assert.AreEqual(new Complex(-2d, 7d), v[1]);
            v[2] = new Complex(-2d, 8d);
            Assert.AreEqual(new Complex(-2d, 8d), v[2]);
            v[0] = new Complex(-2d, 9d);
            Assert.AreEqual(new Complex(-2d, 9d), v[0]);
            v[0] = new Complex(-2d, -1d);
            Assert.AreEqual(new Complex(-2d, -1d), v[0]);
            v[3] = new Complex(-2d, -2d);
            Assert.AreEqual(new Complex(-2d, -2d), v[3]);
            v[3] = new Complex(-2d, -3d);
            Assert.AreEqual(new Complex(-2d, -3d), v[3]);
            v[2] = new Complex(-2d, -4d);
            Assert.AreEqual(new Complex(-2d, -4d), v[2]);
            v[2] = new Complex(-2d, -5d);
            Assert.AreEqual(new Complex(-2d, -5d), v[2]);
            v[1] = new Complex(-2d, -6d);
            Assert.AreEqual(new Complex(-2d, -6d), v[1]);
            v[1] = new Complex(-2d, -7d);
            Assert.AreEqual(new Complex(-2d, -7d), v[1]);
            v[1] = new Complex(-2d, -8d);
            Assert.AreEqual(new Complex(-2d, -8d), v[1]);
            v[3] = new Complex(-2d, -9d);
            Assert.AreEqual(new Complex(-2d, -9d), v[3]);
            v[0] = new Complex(-2d, -9.5d);
            Assert.AreEqual(new Complex(-2d, -9.5d), v[0]);
            v[1] = new Complex(-2d, -8.5d);
            Assert.AreEqual(new Complex(-2d, -8.5d), v[1]);
            v[0] = new Complex(-2d, -7.5d);
            Assert.AreEqual(new Complex(-2d, -7.5d), v[0]);
            v[1] = new Complex(-2d, -6.5d);
            Assert.AreEqual(new Complex(-2d, -6.5d), v[1]);
            v[3] = new Complex(-2d, -5.5d);
            Assert.AreEqual(new Complex(-2d, -5.5d), v[3]);
            v[2] = new Complex(-2d, -4.5d);
            Assert.AreEqual(new Complex(-2d, -4.5d), v[2]);
            v[3] = new Complex(-2d, -3.5d);
            Assert.AreEqual(new Complex(-2d, -3.5d), v[3]);
            v[3] = new Complex(-2d, -2.5d);
            Assert.AreEqual(new Complex(-2d, -2.5d), v[3]);
            v[0] = new Complex(-2d, -1.5d);
            Assert.AreEqual(new Complex(-2d, -1.5d), v[0]);
            v[1] = new Complex(-2d, -0.5d);
            Assert.AreEqual(new Complex(-2d, -0.5d), v[1]);
            v[0] = new Complex(-2d, 0.5d);
            Assert.AreEqual(new Complex(-2d, 0.5d), v[0]);
            v[0] = new Complex(-2d, 1.5d);
            Assert.AreEqual(new Complex(-2d, 1.5d), v[0]);
            v[2] = new Complex(-2d, 2.5d);
            Assert.AreEqual(new Complex(-2d, 2.5d), v[2]);
            v[0] = new Complex(-2d, 3.5d);
            Assert.AreEqual(new Complex(-2d, 3.5d), v[0]);
            v[3] = new Complex(-2d, 4.5d);
            Assert.AreEqual(new Complex(-2d, 4.5d), v[3]);
            v[3] = new Complex(-2d, 5.5d);
            Assert.AreEqual(new Complex(-2d, 5.5d), v[3]);
            v[0] = new Complex(-2d, 6.5d);
            Assert.AreEqual(new Complex(-2d, 6.5d), v[0]);
            v[3] = new Complex(-2d, 7.5d);
            Assert.AreEqual(new Complex(-2d, 7.5d), v[3]);
            v[0] = new Complex(-2d, 8.5d);
            Assert.AreEqual(new Complex(-2d, 8.5d), v[0]);
            v[1] = new Complex(-2d, 9.5d);
            Assert.AreEqual(new Complex(-2d, 9.5d), v[1]);
            v[3] = new Complex(-3d, 0.0);
            Assert.AreEqual(new Complex(-3d, 0.0), v[3]);
            v[3] = new Complex(-3d, 1.0);
            Assert.AreEqual(new Complex(-3d, 1.0), v[3]);
            v[0] = new Complex(-3d, 2d);
            Assert.AreEqual(new Complex(-3d, 2d), v[0]);
            v[0] = new Complex(-3d, 3d);
            Assert.AreEqual(new Complex(-3d, 3d), v[0]);
            v[2] = new Complex(-3d, 4d);
            Assert.AreEqual(new Complex(-3d, 4d), v[2]);
            v[0] = new Complex(-3d, 5d);
            Assert.AreEqual(new Complex(-3d, 5d), v[0]);
            v[0] = new Complex(-3d, 6d);
            Assert.AreEqual(new Complex(-3d, 6d), v[0]);
            v[2] = new Complex(-3d, 7d);
            Assert.AreEqual(new Complex(-3d, 7d), v[2]);
            v[1] = new Complex(-3d, 8d);
            Assert.AreEqual(new Complex(-3d, 8d), v[1]);
            v[0] = new Complex(-3d, 9d);
            Assert.AreEqual(new Complex(-3d, 9d), v[0]);
            v[1] = new Complex(-3d, -1d);
            Assert.AreEqual(new Complex(-3d, -1d), v[1]);
            v[1] = new Complex(-3d, -2d);
            Assert.AreEqual(new Complex(-3d, -2d), v[1]);
            v[0] = new Complex(-3d, -3d);
            Assert.AreEqual(new Complex(-3d, -3d), v[0]);
            v[0] = new Complex(-3d, -4d);
            Assert.AreEqual(new Complex(-3d, -4d), v[0]);
            v[3] = new Complex(-3d, -5d);
            Assert.AreEqual(new Complex(-3d, -5d), v[3]);
            v[1] = new Complex(-3d, -6d);
            Assert.AreEqual(new Complex(-3d, -6d), v[1]);
            v[3] = new Complex(-3d, -7d);
            Assert.AreEqual(new Complex(-3d, -7d), v[3]);
            v[3] = new Complex(-3d, -8d);
            Assert.AreEqual(new Complex(-3d, -8d), v[3]);
            v[3] = new Complex(-3d, -9d);
            Assert.AreEqual(new Complex(-3d, -9d), v[3]);
            v[2] = new Complex(-3d, -9.5d);
            Assert.AreEqual(new Complex(-3d, -9.5d), v[2]);
            v[0] = new Complex(-3d, -8.5d);
            Assert.AreEqual(new Complex(-3d, -8.5d), v[0]);
            v[0] = new Complex(-3d, -7.5d);
            Assert.AreEqual(new Complex(-3d, -7.5d), v[0]);
            v[2] = new Complex(-3d, -6.5d);
            Assert.AreEqual(new Complex(-3d, -6.5d), v[2]);
            v[3] = new Complex(-3d, -5.5d);
            Assert.AreEqual(new Complex(-3d, -5.5d), v[3]);
            v[2] = new Complex(-3d, -4.5d);
            Assert.AreEqual(new Complex(-3d, -4.5d), v[2]);
            v[3] = new Complex(-3d, -3.5d);
            Assert.AreEqual(new Complex(-3d, -3.5d), v[3]);
            v[1] = new Complex(-3d, -2.5d);
            Assert.AreEqual(new Complex(-3d, -2.5d), v[1]);
            v[2] = new Complex(-3d, -1.5d);
            Assert.AreEqual(new Complex(-3d, -1.5d), v[2]);
            v[0] = new Complex(-3d, -0.5d);
            Assert.AreEqual(new Complex(-3d, -0.5d), v[0]);
            v[3] = new Complex(-3d, 0.5d);
            Assert.AreEqual(new Complex(-3d, 0.5d), v[3]);
            v[2] = new Complex(-3d, 1.5d);
            Assert.AreEqual(new Complex(-3d, 1.5d), v[2]);
            v[1] = new Complex(-3d, 2.5d);
            Assert.AreEqual(new Complex(-3d, 2.5d), v[1]);
            v[1] = new Complex(-3d, 3.5d);
            Assert.AreEqual(new Complex(-3d, 3.5d), v[1]);
            v[3] = new Complex(-3d, 4.5d);
            Assert.AreEqual(new Complex(-3d, 4.5d), v[3]);
            v[3] = new Complex(-3d, 5.5d);
            Assert.AreEqual(new Complex(-3d, 5.5d), v[3]);
            v[0] = new Complex(-3d, 6.5d);
            Assert.AreEqual(new Complex(-3d, 6.5d), v[0]);
            v[0] = new Complex(-3d, 7.5d);
            Assert.AreEqual(new Complex(-3d, 7.5d), v[0]);
            v[0] = new Complex(-3d, 8.5d);
            Assert.AreEqual(new Complex(-3d, 8.5d), v[0]);
            v[2] = new Complex(-3d, 9.5d);
            Assert.AreEqual(new Complex(-3d, 9.5d), v[2]);
            v[2] = new Complex(-4d, 0.0);
            Assert.AreEqual(new Complex(-4d, 0.0), v[2]);
            v[1] = new Complex(-4d, 1.0);
            Assert.AreEqual(new Complex(-4d, 1.0), v[1]);
            v[1] = new Complex(-4d, 2d);
            Assert.AreEqual(new Complex(-4d, 2d), v[1]);
            v[1] = new Complex(-4d, 3d);
            Assert.AreEqual(new Complex(-4d, 3d), v[1]);
            v[0] = new Complex(-4d, 4d);
            Assert.AreEqual(new Complex(-4d, 4d), v[0]);
            v[3] = new Complex(-4d, 5d);
            Assert.AreEqual(new Complex(-4d, 5d), v[3]);
            v[2] = new Complex(-4d, 6d);
            Assert.AreEqual(new Complex(-4d, 6d), v[2]);
            v[0] = new Complex(-4d, 7d);
            Assert.AreEqual(new Complex(-4d, 7d), v[0]);
            v[1] = new Complex(-4d, 8d);
            Assert.AreEqual(new Complex(-4d, 8d), v[1]);
            v[1] = new Complex(-4d, 9d);
            Assert.AreEqual(new Complex(-4d, 9d), v[1]);
            v[1] = new Complex(-4d, -1d);
            Assert.AreEqual(new Complex(-4d, -1d), v[1]);
            v[0] = new Complex(-4d, -2d);
            Assert.AreEqual(new Complex(-4d, -2d), v[0]);
            v[0] = new Complex(-4d, -3d);
            Assert.AreEqual(new Complex(-4d, -3d), v[0]);
            v[0] = new Complex(-4d, -4d);
            Assert.AreEqual(new Complex(-4d, -4d), v[0]);
            v[2] = new Complex(-4d, -5d);
            Assert.AreEqual(new Complex(-4d, -5d), v[2]);
            v[0] = new Complex(-4d, -6d);
            Assert.AreEqual(new Complex(-4d, -6d), v[0]);
            v[3] = new Complex(-4d, -7d);
            Assert.AreEqual(new Complex(-4d, -7d), v[3]);
            v[1] = new Complex(-4d, -8d);
            Assert.AreEqual(new Complex(-4d, -8d), v[1]);
            v[1] = new Complex(-4d, -9d);
            Assert.AreEqual(new Complex(-4d, -9d), v[1]);
            v[2] = new Complex(-4d, -9.5d);
            Assert.AreEqual(new Complex(-4d, -9.5d), v[2]);
            v[3] = new Complex(-4d, -8.5d);
            Assert.AreEqual(new Complex(-4d, -8.5d), v[3]);
            v[2] = new Complex(-4d, -7.5d);
            Assert.AreEqual(new Complex(-4d, -7.5d), v[2]);
            v[1] = new Complex(-4d, -6.5d);
            Assert.AreEqual(new Complex(-4d, -6.5d), v[1]);
            v[2] = new Complex(-4d, -5.5d);
            Assert.AreEqual(new Complex(-4d, -5.5d), v[2]);
            v[2] = new Complex(-4d, -4.5d);
            Assert.AreEqual(new Complex(-4d, -4.5d), v[2]);
            v[2] = new Complex(-4d, -3.5d);
            Assert.AreEqual(new Complex(-4d, -3.5d), v[2]);
            v[3] = new Complex(-4d, -2.5d);
            Assert.AreEqual(new Complex(-4d, -2.5d), v[3]);
            v[0] = new Complex(-4d, -1.5d);
            Assert.AreEqual(new Complex(-4d, -1.5d), v[0]);
            v[0] = new Complex(-4d, -0.5d);
            Assert.AreEqual(new Complex(-4d, -0.5d), v[0]);
            v[0] = new Complex(-4d, 0.5d);
            Assert.AreEqual(new Complex(-4d, 0.5d), v[0]);
            v[2] = new Complex(-4d, 1.5d);
            Assert.AreEqual(new Complex(-4d, 1.5d), v[2]);
            v[1] = new Complex(-4d, 2.5d);
            Assert.AreEqual(new Complex(-4d, 2.5d), v[1]);
            v[2] = new Complex(-4d, 3.5d);
            Assert.AreEqual(new Complex(-4d, 3.5d), v[2]);
            v[1] = new Complex(-4d, 4.5d);
            Assert.AreEqual(new Complex(-4d, 4.5d), v[1]);
            v[0] = new Complex(-4d, 5.5d);
            Assert.AreEqual(new Complex(-4d, 5.5d), v[0]);
            v[0] = new Complex(-4d, 6.5d);
            Assert.AreEqual(new Complex(-4d, 6.5d), v[0]);
            v[3] = new Complex(-4d, 7.5d);
            Assert.AreEqual(new Complex(-4d, 7.5d), v[3]);
            v[3] = new Complex(-4d, 8.5d);
            Assert.AreEqual(new Complex(-4d, 8.5d), v[3]);
            v[1] = new Complex(-4d, 9.5d);
            Assert.AreEqual(new Complex(-4d, 9.5d), v[1]);
            v[0] = new Complex(-5d, 0.0);
            Assert.AreEqual(new Complex(-5d, 0.0), v[0]);
            v[3] = new Complex(-5d, 1.0);
            Assert.AreEqual(new Complex(-5d, 1.0), v[3]);
            v[2] = new Complex(-5d, 2d);
            Assert.AreEqual(new Complex(-5d, 2d), v[2]);
            v[3] = new Complex(-5d, 3d);
            Assert.AreEqual(new Complex(-5d, 3d), v[3]);
            v[1] = new Complex(-5d, 4d);
            Assert.AreEqual(new Complex(-5d, 4d), v[1]);
            v[2] = new Complex(-5d, 5d);
            Assert.AreEqual(new Complex(-5d, 5d), v[2]);
            v[3] = new Complex(-5d, 6d);
            Assert.AreEqual(new Complex(-5d, 6d), v[3]);
            v[1] = new Complex(-5d, 7d);
            Assert.AreEqual(new Complex(-5d, 7d), v[1]);
            v[1] = new Complex(-5d, 8d);
            Assert.AreEqual(new Complex(-5d, 8d), v[1]);
            v[3] = new Complex(-5d, 9d);
            Assert.AreEqual(new Complex(-5d, 9d), v[3]);
            v[2] = new Complex(-5d, -1d);
            Assert.AreEqual(new Complex(-5d, -1d), v[2]);
            v[0] = new Complex(-5d, -2d);
            Assert.AreEqual(new Complex(-5d, -2d), v[0]);
            v[3] = new Complex(-5d, -3d);
            Assert.AreEqual(new Complex(-5d, -3d), v[3]);
            v[3] = new Complex(-5d, -4d);
            Assert.AreEqual(new Complex(-5d, -4d), v[3]);
            v[2] = new Complex(-5d, -5d);
            Assert.AreEqual(new Complex(-5d, -5d), v[2]);
            v[2] = new Complex(-5d, -6d);
            Assert.AreEqual(new Complex(-5d, -6d), v[2]);
            v[3] = new Complex(-5d, -7d);
            Assert.AreEqual(new Complex(-5d, -7d), v[3]);
            v[0] = new Complex(-5d, -8d);
            Assert.AreEqual(new Complex(-5d, -8d), v[0]);
            v[2] = new Complex(-5d, -9d);
            Assert.AreEqual(new Complex(-5d, -9d), v[2]);
            v[2] = new Complex(-5d, -9.5d);
            Assert.AreEqual(new Complex(-5d, -9.5d), v[2]);
            v[2] = new Complex(-5d, -8.5d);
            Assert.AreEqual(new Complex(-5d, -8.5d), v[2]);
            v[3] = new Complex(-5d, -7.5d);
            Assert.AreEqual(new Complex(-5d, -7.5d), v[3]);
            v[1] = new Complex(-5d, -6.5d);
            Assert.AreEqual(new Complex(-5d, -6.5d), v[1]);
            v[0] = new Complex(-5d, -5.5d);
            Assert.AreEqual(new Complex(-5d, -5.5d), v[0]);
            v[0] = new Complex(-5d, -4.5d);
            Assert.AreEqual(new Complex(-5d, -4.5d), v[0]);
            v[2] = new Complex(-5d, -3.5d);
            Assert.AreEqual(new Complex(-5d, -3.5d), v[2]);
            v[0] = new Complex(-5d, -2.5d);
            Assert.AreEqual(new Complex(-5d, -2.5d), v[0]);
            v[1] = new Complex(-5d, -1.5d);
            Assert.AreEqual(new Complex(-5d, -1.5d), v[1]);
            v[2] = new Complex(-5d, -0.5d);
            Assert.AreEqual(new Complex(-5d, -0.5d), v[2]);
            v[3] = new Complex(-5d, 0.5d);
            Assert.AreEqual(new Complex(-5d, 0.5d), v[3]);
            v[1] = new Complex(-5d, 1.5d);
            Assert.AreEqual(new Complex(-5d, 1.5d), v[1]);
            v[0] = new Complex(-5d, 2.5d);
            Assert.AreEqual(new Complex(-5d, 2.5d), v[0]);
            v[0] = new Complex(-5d, 3.5d);
            Assert.AreEqual(new Complex(-5d, 3.5d), v[0]);
            v[3] = new Complex(-5d, 4.5d);
            Assert.AreEqual(new Complex(-5d, 4.5d), v[3]);
            v[0] = new Complex(-5d, 5.5d);
            Assert.AreEqual(new Complex(-5d, 5.5d), v[0]);
            v[2] = new Complex(-5d, 6.5d);
            Assert.AreEqual(new Complex(-5d, 6.5d), v[2]);
            v[1] = new Complex(-5d, 7.5d);
            Assert.AreEqual(new Complex(-5d, 7.5d), v[1]);
            v[3] = new Complex(-5d, 8.5d);
            Assert.AreEqual(new Complex(-5d, 8.5d), v[3]);
            v[0] = new Complex(-5d, 9.5d);
            Assert.AreEqual(new Complex(-5d, 9.5d), v[0]);
            v[3] = new Complex(-6d, 0.0);
            Assert.AreEqual(new Complex(-6d, 0.0), v[3]);
            v[3] = new Complex(-6d, 1.0);
            Assert.AreEqual(new Complex(-6d, 1.0), v[3]);
            v[0] = new Complex(-6d, 2d);
            Assert.AreEqual(new Complex(-6d, 2d), v[0]);
            v[2] = new Complex(-6d, 3d);
            Assert.AreEqual(new Complex(-6d, 3d), v[2]);
            v[1] = new Complex(-6d, 4d);
            Assert.AreEqual(new Complex(-6d, 4d), v[1]);
            v[1] = new Complex(-6d, 5d);
            Assert.AreEqual(new Complex(-6d, 5d), v[1]);
            v[0] = new Complex(-6d, 6d);
            Assert.AreEqual(new Complex(-6d, 6d), v[0]);
            v[3] = new Complex(-6d, 7d);
            Assert.AreEqual(new Complex(-6d, 7d), v[3]);
            v[1] = new Complex(-6d, 8d);
            Assert.AreEqual(new Complex(-6d, 8d), v[1]);
            v[0] = new Complex(-6d, 9d);
            Assert.AreEqual(new Complex(-6d, 9d), v[0]);
            v[3] = new Complex(-6d, -1d);
            Assert.AreEqual(new Complex(-6d, -1d), v[3]);
            v[1] = new Complex(-6d, -2d);
            Assert.AreEqual(new Complex(-6d, -2d), v[1]);
            v[3] = new Complex(-6d, -3d);
            Assert.AreEqual(new Complex(-6d, -3d), v[3]);
            v[1] = new Complex(-6d, -4d);
            Assert.AreEqual(new Complex(-6d, -4d), v[1]);
            v[0] = new Complex(-6d, -5d);
            Assert.AreEqual(new Complex(-6d, -5d), v[0]);
            v[3] = new Complex(-6d, -6d);
            Assert.AreEqual(new Complex(-6d, -6d), v[3]);
            v[0] = new Complex(-6d, -7d);
            Assert.AreEqual(new Complex(-6d, -7d), v[0]);
            v[2] = new Complex(-6d, -8d);
            Assert.AreEqual(new Complex(-6d, -8d), v[2]);
            v[2] = new Complex(-6d, -9d);
            Assert.AreEqual(new Complex(-6d, -9d), v[2]);
            v[2] = new Complex(-6d, -9.5d);
            Assert.AreEqual(new Complex(-6d, -9.5d), v[2]);
            v[2] = new Complex(-6d, -8.5d);
            Assert.AreEqual(new Complex(-6d, -8.5d), v[2]);
            v[2] = new Complex(-6d, -7.5d);
            Assert.AreEqual(new Complex(-6d, -7.5d), v[2]);
            v[1] = new Complex(-6d, -6.5d);
            Assert.AreEqual(new Complex(-6d, -6.5d), v[1]);
            v[2] = new Complex(-6d, -5.5d);
            Assert.AreEqual(new Complex(-6d, -5.5d), v[2]);
            v[2] = new Complex(-6d, -4.5d);
            Assert.AreEqual(new Complex(-6d, -4.5d), v[2]);
            v[1] = new Complex(-6d, -3.5d);
            Assert.AreEqual(new Complex(-6d, -3.5d), v[1]);
            v[2] = new Complex(-6d, -2.5d);
            Assert.AreEqual(new Complex(-6d, -2.5d), v[2]);
            v[0] = new Complex(-6d, -1.5d);
            Assert.AreEqual(new Complex(-6d, -1.5d), v[0]);
            v[0] = new Complex(-6d, -0.5d);
            Assert.AreEqual(new Complex(-6d, -0.5d), v[0]);
            v[2] = new Complex(-6d, 0.5d);
            Assert.AreEqual(new Complex(-6d, 0.5d), v[2]);
            v[0] = new Complex(-6d, 1.5d);
            Assert.AreEqual(new Complex(-6d, 1.5d), v[0]);
            v[1] = new Complex(-6d, 2.5d);
            Assert.AreEqual(new Complex(-6d, 2.5d), v[1]);
            v[0] = new Complex(-6d, 3.5d);
            Assert.AreEqual(new Complex(-6d, 3.5d), v[0]);
            v[0] = new Complex(-6d, 4.5d);
            Assert.AreEqual(new Complex(-6d, 4.5d), v[0]);
            v[3] = new Complex(-6d, 5.5d);
            Assert.AreEqual(new Complex(-6d, 5.5d), v[3]);
            v[2] = new Complex(-6d, 6.5d);
            Assert.AreEqual(new Complex(-6d, 6.5d), v[2]);
            v[2] = new Complex(-6d, 7.5d);
            Assert.AreEqual(new Complex(-6d, 7.5d), v[2]);
            v[1] = new Complex(-6d, 8.5d);
            Assert.AreEqual(new Complex(-6d, 8.5d), v[1]);
            v[0] = new Complex(-6d, 9.5d);
            Assert.AreEqual(new Complex(-6d, 9.5d), v[0]);
            v[2] = new Complex(-7d, 0.0);
            Assert.AreEqual(new Complex(-7d, 0.0), v[2]);
            v[0] = new Complex(-7d, 1.0);
            Assert.AreEqual(new Complex(-7d, 1.0), v[0]);
            v[3] = new Complex(-7d, 2d);
            Assert.AreEqual(new Complex(-7d, 2d), v[3]);
            v[2] = new Complex(-7d, 3d);
            Assert.AreEqual(new Complex(-7d, 3d), v[2]);
            v[0] = new Complex(-7d, 4d);
            Assert.AreEqual(new Complex(-7d, 4d), v[0]);
            v[3] = new Complex(-7d, 5d);
            Assert.AreEqual(new Complex(-7d, 5d), v[3]);
            v[2] = new Complex(-7d, 6d);
            Assert.AreEqual(new Complex(-7d, 6d), v[2]);
            v[1] = new Complex(-7d, 7d);
            Assert.AreEqual(new Complex(-7d, 7d), v[1]);
            v[3] = new Complex(-7d, 8d);
            Assert.AreEqual(new Complex(-7d, 8d), v[3]);
            v[3] = new Complex(-7d, 9d);
            Assert.AreEqual(new Complex(-7d, 9d), v[3]);
            v[3] = new Complex(-7d, -1d);
            Assert.AreEqual(new Complex(-7d, -1d), v[3]);
            v[3] = new Complex(-7d, -2d);
            Assert.AreEqual(new Complex(-7d, -2d), v[3]);
            v[3] = new Complex(-7d, -3d);
            Assert.AreEqual(new Complex(-7d, -3d), v[3]);
            v[2] = new Complex(-7d, -4d);
            Assert.AreEqual(new Complex(-7d, -4d), v[2]);
            v[0] = new Complex(-7d, -5d);
            Assert.AreEqual(new Complex(-7d, -5d), v[0]);
            v[1] = new Complex(-7d, -6d);
            Assert.AreEqual(new Complex(-7d, -6d), v[1]);
            v[1] = new Complex(-7d, -7d);
            Assert.AreEqual(new Complex(-7d, -7d), v[1]);
            v[1] = new Complex(-7d, -8d);
            Assert.AreEqual(new Complex(-7d, -8d), v[1]);
            v[1] = new Complex(-7d, -9d);
            Assert.AreEqual(new Complex(-7d, -9d), v[1]);
            v[3] = new Complex(-7d, -9.5d);
            Assert.AreEqual(new Complex(-7d, -9.5d), v[3]);
            v[3] = new Complex(-7d, -8.5d);
            Assert.AreEqual(new Complex(-7d, -8.5d), v[3]);
            v[3] = new Complex(-7d, -7.5d);
            Assert.AreEqual(new Complex(-7d, -7.5d), v[3]);
            v[0] = new Complex(-7d, -6.5d);
            Assert.AreEqual(new Complex(-7d, -6.5d), v[0]);
            v[3] = new Complex(-7d, -5.5d);
            Assert.AreEqual(new Complex(-7d, -5.5d), v[3]);
            v[2] = new Complex(-7d, -4.5d);
            Assert.AreEqual(new Complex(-7d, -4.5d), v[2]);
            v[0] = new Complex(-7d, -3.5d);
            Assert.AreEqual(new Complex(-7d, -3.5d), v[0]);
            v[1] = new Complex(-7d, -2.5d);
            Assert.AreEqual(new Complex(-7d, -2.5d), v[1]);
            v[0] = new Complex(-7d, -1.5d);
            Assert.AreEqual(new Complex(-7d, -1.5d), v[0]);
            v[3] = new Complex(-7d, -0.5d);
            Assert.AreEqual(new Complex(-7d, -0.5d), v[3]);
            v[1] = new Complex(-7d, 0.5d);
            Assert.AreEqual(new Complex(-7d, 0.5d), v[1]);
            v[1] = new Complex(-7d, 1.5d);
            Assert.AreEqual(new Complex(-7d, 1.5d), v[1]);
            v[1] = new Complex(-7d, 2.5d);
            Assert.AreEqual(new Complex(-7d, 2.5d), v[1]);
            v[2] = new Complex(-7d, 3.5d);
            Assert.AreEqual(new Complex(-7d, 3.5d), v[2]);
            v[1] = new Complex(-7d, 4.5d);
            Assert.AreEqual(new Complex(-7d, 4.5d), v[1]);
            v[3] = new Complex(-7d, 5.5d);
            Assert.AreEqual(new Complex(-7d, 5.5d), v[3]);
            v[2] = new Complex(-7d, 6.5d);
            Assert.AreEqual(new Complex(-7d, 6.5d), v[2]);
            v[3] = new Complex(-7d, 7.5d);
            Assert.AreEqual(new Complex(-7d, 7.5d), v[3]);
            v[0] = new Complex(-7d, 8.5d);
            Assert.AreEqual(new Complex(-7d, 8.5d), v[0]);
            v[1] = new Complex(-7d, 9.5d);
            Assert.AreEqual(new Complex(-7d, 9.5d), v[1]);
            v[3] = new Complex(-8d, 0.0);
            Assert.AreEqual(new Complex(-8d, 0.0), v[3]);
            v[3] = new Complex(-8d, 1.0);
            Assert.AreEqual(new Complex(-8d, 1.0), v[3]);
            v[3] = new Complex(-8d, 2d);
            Assert.AreEqual(new Complex(-8d, 2d), v[3]);
            v[2] = new Complex(-8d, 3d);
            Assert.AreEqual(new Complex(-8d, 3d), v[2]);
            v[0] = new Complex(-8d, 4d);
            Assert.AreEqual(new Complex(-8d, 4d), v[0]);
            v[0] = new Complex(-8d, 5d);
            Assert.AreEqual(new Complex(-8d, 5d), v[0]);
            v[3] = new Complex(-8d, 6d);
            Assert.AreEqual(new Complex(-8d, 6d), v[3]);
            v[0] = new Complex(-8d, 7d);
            Assert.AreEqual(new Complex(-8d, 7d), v[0]);
            v[2] = new Complex(-8d, 8d);
            Assert.AreEqual(new Complex(-8d, 8d), v[2]);
            v[0] = new Complex(-8d, 9d);
            Assert.AreEqual(new Complex(-8d, 9d), v[0]);
            v[2] = new Complex(-8d, -1d);
            Assert.AreEqual(new Complex(-8d, -1d), v[2]);
            v[1] = new Complex(-8d, -2d);
            Assert.AreEqual(new Complex(-8d, -2d), v[1]);
            v[1] = new Complex(-8d, -3d);
            Assert.AreEqual(new Complex(-8d, -3d), v[1]);
            v[0] = new Complex(-8d, -4d);
            Assert.AreEqual(new Complex(-8d, -4d), v[0]);
            v[1] = new Complex(-8d, -5d);
            Assert.AreEqual(new Complex(-8d, -5d), v[1]);
            v[1] = new Complex(-8d, -6d);
            Assert.AreEqual(new Complex(-8d, -6d), v[1]);
            v[3] = new Complex(-8d, -7d);
            Assert.AreEqual(new Complex(-8d, -7d), v[3]);
            v[3] = new Complex(-8d, -8d);
            Assert.AreEqual(new Complex(-8d, -8d), v[3]);
            v[0] = new Complex(-8d, -9d);
            Assert.AreEqual(new Complex(-8d, -9d), v[0]);
            v[3] = new Complex(-8d, -9.5d);
            Assert.AreEqual(new Complex(-8d, -9.5d), v[3]);
            v[0] = new Complex(-8d, -8.5d);
            Assert.AreEqual(new Complex(-8d, -8.5d), v[0]);
            v[1] = new Complex(-8d, -7.5d);
            Assert.AreEqual(new Complex(-8d, -7.5d), v[1]);
            v[1] = new Complex(-8d, -6.5d);
            Assert.AreEqual(new Complex(-8d, -6.5d), v[1]);
            v[1] = new Complex(-8d, -5.5d);
            Assert.AreEqual(new Complex(-8d, -5.5d), v[1]);
            v[1] = new Complex(-8d, -4.5d);
            Assert.AreEqual(new Complex(-8d, -4.5d), v[1]);
            v[1] = new Complex(-8d, -3.5d);
            Assert.AreEqual(new Complex(-8d, -3.5d), v[1]);
            v[2] = new Complex(-8d, -2.5d);
            Assert.AreEqual(new Complex(-8d, -2.5d), v[2]);
            v[0] = new Complex(-8d, -1.5d);
            Assert.AreEqual(new Complex(-8d, -1.5d), v[0]);
            v[2] = new Complex(-8d, -0.5d);
            Assert.AreEqual(new Complex(-8d, -0.5d), v[2]);
            v[3] = new Complex(-8d, 0.5d);
            Assert.AreEqual(new Complex(-8d, 0.5d), v[3]);
            v[1] = new Complex(-8d, 1.5d);
            Assert.AreEqual(new Complex(-8d, 1.5d), v[1]);
            v[2] = new Complex(-8d, 2.5d);
            Assert.AreEqual(new Complex(-8d, 2.5d), v[2]);
            v[0] = new Complex(-8d, 3.5d);
            Assert.AreEqual(new Complex(-8d, 3.5d), v[0]);
            v[0] = new Complex(-8d, 4.5d);
            Assert.AreEqual(new Complex(-8d, 4.5d), v[0]);
            v[2] = new Complex(-8d, 5.5d);
            Assert.AreEqual(new Complex(-8d, 5.5d), v[2]);
            v[0] = new Complex(-8d, 6.5d);
            Assert.AreEqual(new Complex(-8d, 6.5d), v[0]);
            v[3] = new Complex(-8d, 7.5d);
            Assert.AreEqual(new Complex(-8d, 7.5d), v[3]);
            v[1] = new Complex(-8d, 8.5d);
            Assert.AreEqual(new Complex(-8d, 8.5d), v[1]);
            v[3] = new Complex(-8d, 9.5d);
            Assert.AreEqual(new Complex(-8d, 9.5d), v[3]);
            v[2] = new Complex(-9d, 0.0);
            Assert.AreEqual(new Complex(-9d, 0.0), v[2]);
            v[3] = new Complex(-9d, 1.0);
            Assert.AreEqual(new Complex(-9d, 1.0), v[3]);
            v[3] = new Complex(-9d, 2d);
            Assert.AreEqual(new Complex(-9d, 2d), v[3]);
            v[3] = new Complex(-9d, 3d);
            Assert.AreEqual(new Complex(-9d, 3d), v[3]);
            v[0] = new Complex(-9d, 4d);
            Assert.AreEqual(new Complex(-9d, 4d), v[0]);
            v[1] = new Complex(-9d, 5d);
            Assert.AreEqual(new Complex(-9d, 5d), v[1]);
            v[0] = new Complex(-9d, 6d);
            Assert.AreEqual(new Complex(-9d, 6d), v[0]);
            v[0] = new Complex(-9d, 7d);
            Assert.AreEqual(new Complex(-9d, 7d), v[0]);
            v[0] = new Complex(-9d, 8d);
            Assert.AreEqual(new Complex(-9d, 8d), v[0]);
            v[1] = new Complex(-9d, 9d);
            Assert.AreEqual(new Complex(-9d, 9d), v[1]);
            v[0] = new Complex(-9d, -1d);
            Assert.AreEqual(new Complex(-9d, -1d), v[0]);
            v[0] = new Complex(-9d, -2d);
            Assert.AreEqual(new Complex(-9d, -2d), v[0]);
            v[2] = new Complex(-9d, -3d);
            Assert.AreEqual(new Complex(-9d, -3d), v[2]);
            v[2] = new Complex(-9d, -4d);
            Assert.AreEqual(new Complex(-9d, -4d), v[2]);
            v[1] = new Complex(-9d, -5d);
            Assert.AreEqual(new Complex(-9d, -5d), v[1]);
            v[0] = new Complex(-9d, -6d);
            Assert.AreEqual(new Complex(-9d, -6d), v[0]);
            v[1] = new Complex(-9d, -7d);
            Assert.AreEqual(new Complex(-9d, -7d), v[1]);
            v[2] = new Complex(-9d, -8d);
            Assert.AreEqual(new Complex(-9d, -8d), v[2]);
            v[2] = new Complex(-9d, -9d);
            Assert.AreEqual(new Complex(-9d, -9d), v[2]);
            v[0] = new Complex(-9d, -9.5d);
            Assert.AreEqual(new Complex(-9d, -9.5d), v[0]);
            v[3] = new Complex(-9d, -8.5d);
            Assert.AreEqual(new Complex(-9d, -8.5d), v[3]);
            v[1] = new Complex(-9d, -7.5d);
            Assert.AreEqual(new Complex(-9d, -7.5d), v[1]);
            v[2] = new Complex(-9d, -6.5d);
            Assert.AreEqual(new Complex(-9d, -6.5d), v[2]);
            v[2] = new Complex(-9d, -5.5d);
            Assert.AreEqual(new Complex(-9d, -5.5d), v[2]);
            v[3] = new Complex(-9d, -4.5d);
            Assert.AreEqual(new Complex(-9d, -4.5d), v[3]);
            v[2] = new Complex(-9d, -3.5d);
            Assert.AreEqual(new Complex(-9d, -3.5d), v[2]);
            v[3] = new Complex(-9d, -2.5d);
            Assert.AreEqual(new Complex(-9d, -2.5d), v[3]);
            v[1] = new Complex(-9d, -1.5d);
            Assert.AreEqual(new Complex(-9d, -1.5d), v[1]);
            v[0] = new Complex(-9d, -0.5d);
            Assert.AreEqual(new Complex(-9d, -0.5d), v[0]);
            v[2] = new Complex(-9d, 0.5d);
            Assert.AreEqual(new Complex(-9d, 0.5d), v[2]);
            v[1] = new Complex(-9d, 1.5d);
            Assert.AreEqual(new Complex(-9d, 1.5d), v[1]);
            v[1] = new Complex(-9d, 2.5d);
            Assert.AreEqual(new Complex(-9d, 2.5d), v[1]);
            v[1] = new Complex(-9d, 3.5d);
            Assert.AreEqual(new Complex(-9d, 3.5d), v[1]);
            v[0] = new Complex(-9d, 4.5d);
            Assert.AreEqual(new Complex(-9d, 4.5d), v[0]);
            v[1] = new Complex(-9d, 5.5d);
            Assert.AreEqual(new Complex(-9d, 5.5d), v[1]);
            v[3] = new Complex(-9d, 6.5d);
            Assert.AreEqual(new Complex(-9d, 6.5d), v[3]);
            v[0] = new Complex(-9d, 7.5d);
            Assert.AreEqual(new Complex(-9d, 7.5d), v[0]);
            v[2] = new Complex(-9d, 8.5d);
            Assert.AreEqual(new Complex(-9d, 8.5d), v[2]);
            v[1] = new Complex(-9d, 9.5d);
            Assert.AreEqual(new Complex(-9d, 9.5d), v[1]);
            v[0] = new Complex(-9.5d, 0.0);
            Assert.AreEqual(new Complex(-9.5d, 0.0), v[0]);
            v[1] = new Complex(-9.5d, 1.0);
            Assert.AreEqual(new Complex(-9.5d, 1.0), v[1]);
            v[0] = new Complex(-9.5d, 2d);
            Assert.AreEqual(new Complex(-9.5d, 2d), v[0]);
            v[1] = new Complex(-9.5d, 3d);
            Assert.AreEqual(new Complex(-9.5d, 3d), v[1]);
            v[3] = new Complex(-9.5d, 4d);
            Assert.AreEqual(new Complex(-9.5d, 4d), v[3]);
            v[1] = new Complex(-9.5d, 5d);
            Assert.AreEqual(new Complex(-9.5d, 5d), v[1]);
            v[2] = new Complex(-9.5d, 6d);
            Assert.AreEqual(new Complex(-9.5d, 6d), v[2]);
            v[2] = new Complex(-9.5d, 7d);
            Assert.AreEqual(new Complex(-9.5d, 7d), v[2]);
            v[0] = new Complex(-9.5d, 8d);
            Assert.AreEqual(new Complex(-9.5d, 8d), v[0]);
            v[3] = new Complex(-9.5d, 9d);
            Assert.AreEqual(new Complex(-9.5d, 9d), v[3]);
            v[0] = new Complex(-9.5d, -1d);
            Assert.AreEqual(new Complex(-9.5d, -1d), v[0]);
            v[1] = new Complex(-9.5d, -2d);
            Assert.AreEqual(new Complex(-9.5d, -2d), v[1]);
            v[1] = new Complex(-9.5d, -3d);
            Assert.AreEqual(new Complex(-9.5d, -3d), v[1]);
            v[1] = new Complex(-9.5d, -4d);
            Assert.AreEqual(new Complex(-9.5d, -4d), v[1]);
            v[1] = new Complex(-9.5d, -5d);
            Assert.AreEqual(new Complex(-9.5d, -5d), v[1]);
            v[0] = new Complex(-9.5d, -6d);
            Assert.AreEqual(new Complex(-9.5d, -6d), v[0]);
            v[1] = new Complex(-9.5d, -7d);
            Assert.AreEqual(new Complex(-9.5d, -7d), v[1]);
            v[1] = new Complex(-9.5d, -8d);
            Assert.AreEqual(new Complex(-9.5d, -8d), v[1]);
            v[1] = new Complex(-9.5d, -9d);
            Assert.AreEqual(new Complex(-9.5d, -9d), v[1]);
            v[3] = new Complex(-9.5d, -9.5d);
            Assert.AreEqual(new Complex(-9.5d, -9.5d), v[3]);
            v[1] = new Complex(-9.5d, -8.5d);
            Assert.AreEqual(new Complex(-9.5d, -8.5d), v[1]);
            v[2] = new Complex(-9.5d, -7.5d);
            Assert.AreEqual(new Complex(-9.5d, -7.5d), v[2]);
            v[2] = new Complex(-9.5d, -6.5d);
            Assert.AreEqual(new Complex(-9.5d, -6.5d), v[2]);
            v[0] = new Complex(-9.5d, -5.5d);
            Assert.AreEqual(new Complex(-9.5d, -5.5d), v[0]);
            v[2] = new Complex(-9.5d, -4.5d);
            Assert.AreEqual(new Complex(-9.5d, -4.5d), v[2]);
            v[3] = new Complex(-9.5d, -3.5d);
            Assert.AreEqual(new Complex(-9.5d, -3.5d), v[3]);
            v[2] = new Complex(-9.5d, -2.5d);
            Assert.AreEqual(new Complex(-9.5d, -2.5d), v[2]);
            v[2] = new Complex(-9.5d, -1.5d);
            Assert.AreEqual(new Complex(-9.5d, -1.5d), v[2]);
            v[2] = new Complex(-9.5d, -0.5d);
            Assert.AreEqual(new Complex(-9.5d, -0.5d), v[2]);
            v[1] = new Complex(-9.5d, 0.5d);
            Assert.AreEqual(new Complex(-9.5d, 0.5d), v[1]);
            v[2] = new Complex(-9.5d, 1.5d);
            Assert.AreEqual(new Complex(-9.5d, 1.5d), v[2]);
            v[0] = new Complex(-9.5d, 2.5d);
            Assert.AreEqual(new Complex(-9.5d, 2.5d), v[0]);
            v[2] = new Complex(-9.5d, 3.5d);
            Assert.AreEqual(new Complex(-9.5d, 3.5d), v[2]);
            v[0] = new Complex(-9.5d, 4.5d);
            Assert.AreEqual(new Complex(-9.5d, 4.5d), v[0]);
            v[2] = new Complex(-9.5d, 5.5d);
            Assert.AreEqual(new Complex(-9.5d, 5.5d), v[2]);
            v[2] = new Complex(-9.5d, 6.5d);
            Assert.AreEqual(new Complex(-9.5d, 6.5d), v[2]);
            v[2] = new Complex(-9.5d, 7.5d);
            Assert.AreEqual(new Complex(-9.5d, 7.5d), v[2]);
            v[0] = new Complex(-9.5d, 8.5d);
            Assert.AreEqual(new Complex(-9.5d, 8.5d), v[0]);
            v[2] = new Complex(-9.5d, 9.5d);
            Assert.AreEqual(new Complex(-9.5d, 9.5d), v[2]);
            v[0] = new Complex(-8.5d, 0.0);
            Assert.AreEqual(new Complex(-8.5d, 0.0), v[0]);
            v[0] = new Complex(-8.5d, 1.0);
            Assert.AreEqual(new Complex(-8.5d, 1.0), v[0]);
            v[3] = new Complex(-8.5d, 2d);
            Assert.AreEqual(new Complex(-8.5d, 2d), v[3]);
            v[3] = new Complex(-8.5d, 3d);
            Assert.AreEqual(new Complex(-8.5d, 3d), v[3]);
            v[2] = new Complex(-8.5d, 4d);
            Assert.AreEqual(new Complex(-8.5d, 4d), v[2]);
            v[0] = new Complex(-8.5d, 5d);
            Assert.AreEqual(new Complex(-8.5d, 5d), v[0]);
            v[0] = new Complex(-8.5d, 6d);
            Assert.AreEqual(new Complex(-8.5d, 6d), v[0]);
            v[3] = new Complex(-8.5d, 7d);
            Assert.AreEqual(new Complex(-8.5d, 7d), v[3]);
            v[0] = new Complex(-8.5d, 8d);
            Assert.AreEqual(new Complex(-8.5d, 8d), v[0]);
            v[0] = new Complex(-8.5d, 9d);
            Assert.AreEqual(new Complex(-8.5d, 9d), v[0]);
            v[3] = new Complex(-8.5d, -1d);
            Assert.AreEqual(new Complex(-8.5d, -1d), v[3]);
            v[0] = new Complex(-8.5d, -2d);
            Assert.AreEqual(new Complex(-8.5d, -2d), v[0]);
            v[1] = new Complex(-8.5d, -3d);
            Assert.AreEqual(new Complex(-8.5d, -3d), v[1]);
            v[2] = new Complex(-8.5d, -4d);
            Assert.AreEqual(new Complex(-8.5d, -4d), v[2]);
            v[3] = new Complex(-8.5d, -5d);
            Assert.AreEqual(new Complex(-8.5d, -5d), v[3]);
            v[0] = new Complex(-8.5d, -6d);
            Assert.AreEqual(new Complex(-8.5d, -6d), v[0]);
            v[1] = new Complex(-8.5d, -7d);
            Assert.AreEqual(new Complex(-8.5d, -7d), v[1]);
            v[3] = new Complex(-8.5d, -8d);
            Assert.AreEqual(new Complex(-8.5d, -8d), v[3]);
            v[0] = new Complex(-8.5d, -9d);
            Assert.AreEqual(new Complex(-8.5d, -9d), v[0]);
            v[2] = new Complex(-8.5d, -9.5d);
            Assert.AreEqual(new Complex(-8.5d, -9.5d), v[2]);
            v[0] = new Complex(-8.5d, -8.5d);
            Assert.AreEqual(new Complex(-8.5d, -8.5d), v[0]);
            v[3] = new Complex(-8.5d, -7.5d);
            Assert.AreEqual(new Complex(-8.5d, -7.5d), v[3]);
            v[0] = new Complex(-8.5d, -6.5d);
            Assert.AreEqual(new Complex(-8.5d, -6.5d), v[0]);
            v[0] = new Complex(-8.5d, -5.5d);
            Assert.AreEqual(new Complex(-8.5d, -5.5d), v[0]);
            v[2] = new Complex(-8.5d, -4.5d);
            Assert.AreEqual(new Complex(-8.5d, -4.5d), v[2]);
            v[1] = new Complex(-8.5d, -3.5d);
            Assert.AreEqual(new Complex(-8.5d, -3.5d), v[1]);
            v[3] = new Complex(-8.5d, -2.5d);
            Assert.AreEqual(new Complex(-8.5d, -2.5d), v[3]);
            v[2] = new Complex(-8.5d, -1.5d);
            Assert.AreEqual(new Complex(-8.5d, -1.5d), v[2]);
            v[1] = new Complex(-8.5d, -0.5d);
            Assert.AreEqual(new Complex(-8.5d, -0.5d), v[1]);
            v[3] = new Complex(-8.5d, 0.5d);
            Assert.AreEqual(new Complex(-8.5d, 0.5d), v[3]);
            v[2] = new Complex(-8.5d, 1.5d);
            Assert.AreEqual(new Complex(-8.5d, 1.5d), v[2]);
            v[2] = new Complex(-8.5d, 2.5d);
            Assert.AreEqual(new Complex(-8.5d, 2.5d), v[2]);
            v[1] = new Complex(-8.5d, 3.5d);
            Assert.AreEqual(new Complex(-8.5d, 3.5d), v[1]);
            v[3] = new Complex(-8.5d, 4.5d);
            Assert.AreEqual(new Complex(-8.5d, 4.5d), v[3]);
            v[1] = new Complex(-8.5d, 5.5d);
            Assert.AreEqual(new Complex(-8.5d, 5.5d), v[1]);
            v[2] = new Complex(-8.5d, 6.5d);
            Assert.AreEqual(new Complex(-8.5d, 6.5d), v[2]);
            v[1] = new Complex(-8.5d, 7.5d);
            Assert.AreEqual(new Complex(-8.5d, 7.5d), v[1]);
            v[3] = new Complex(-8.5d, 8.5d);
            Assert.AreEqual(new Complex(-8.5d, 8.5d), v[3]);
            v[0] = new Complex(-8.5d, 9.5d);
            Assert.AreEqual(new Complex(-8.5d, 9.5d), v[0]);
            v[0] = new Complex(-7.5d, 0.0);
            Assert.AreEqual(new Complex(-7.5d, 0.0), v[0]);
            v[1] = new Complex(-7.5d, 1.0);
            Assert.AreEqual(new Complex(-7.5d, 1.0), v[1]);
            v[3] = new Complex(-7.5d, 2d);
            Assert.AreEqual(new Complex(-7.5d, 2d), v[3]);
            v[2] = new Complex(-7.5d, 3d);
            Assert.AreEqual(new Complex(-7.5d, 3d), v[2]);
            v[1] = new Complex(-7.5d, 4d);
            Assert.AreEqual(new Complex(-7.5d, 4d), v[1]);
            v[2] = new Complex(-7.5d, 5d);
            Assert.AreEqual(new Complex(-7.5d, 5d), v[2]);
            v[1] = new Complex(-7.5d, 6d);
            Assert.AreEqual(new Complex(-7.5d, 6d), v[1]);
            v[0] = new Complex(-7.5d, 7d);
            Assert.AreEqual(new Complex(-7.5d, 7d), v[0]);
            v[1] = new Complex(-7.5d, 8d);
            Assert.AreEqual(new Complex(-7.5d, 8d), v[1]);
            v[3] = new Complex(-7.5d, 9d);
            Assert.AreEqual(new Complex(-7.5d, 9d), v[3]);
            v[0] = new Complex(-7.5d, -1d);
            Assert.AreEqual(new Complex(-7.5d, -1d), v[0]);
            v[0] = new Complex(-7.5d, -2d);
            Assert.AreEqual(new Complex(-7.5d, -2d), v[0]);
            v[2] = new Complex(-7.5d, -3d);
            Assert.AreEqual(new Complex(-7.5d, -3d), v[2]);
            v[1] = new Complex(-7.5d, -4d);
            Assert.AreEqual(new Complex(-7.5d, -4d), v[1]);
            v[1] = new Complex(-7.5d, -5d);
            Assert.AreEqual(new Complex(-7.5d, -5d), v[1]);
            v[2] = new Complex(-7.5d, -6d);
            Assert.AreEqual(new Complex(-7.5d, -6d), v[2]);
            v[1] = new Complex(-7.5d, -7d);
            Assert.AreEqual(new Complex(-7.5d, -7d), v[1]);
            v[0] = new Complex(-7.5d, -8d);
            Assert.AreEqual(new Complex(-7.5d, -8d), v[0]);
            v[3] = new Complex(-7.5d, -9d);
            Assert.AreEqual(new Complex(-7.5d, -9d), v[3]);
            v[0] = new Complex(-7.5d, -9.5d);
            Assert.AreEqual(new Complex(-7.5d, -9.5d), v[0]);
            v[0] = new Complex(-7.5d, -8.5d);
            Assert.AreEqual(new Complex(-7.5d, -8.5d), v[0]);
            v[0] = new Complex(-7.5d, -7.5d);
            Assert.AreEqual(new Complex(-7.5d, -7.5d), v[0]);
            v[1] = new Complex(-7.5d, -6.5d);
            Assert.AreEqual(new Complex(-7.5d, -6.5d), v[1]);
            v[2] = new Complex(-7.5d, -5.5d);
            Assert.AreEqual(new Complex(-7.5d, -5.5d), v[2]);
            v[0] = new Complex(-7.5d, -4.5d);
            Assert.AreEqual(new Complex(-7.5d, -4.5d), v[0]);
            v[1] = new Complex(-7.5d, -3.5d);
            Assert.AreEqual(new Complex(-7.5d, -3.5d), v[1]);
            v[1] = new Complex(-7.5d, -2.5d);
            Assert.AreEqual(new Complex(-7.5d, -2.5d), v[1]);
            v[2] = new Complex(-7.5d, -1.5d);
            Assert.AreEqual(new Complex(-7.5d, -1.5d), v[2]);
            v[2] = new Complex(-7.5d, -0.5d);
            Assert.AreEqual(new Complex(-7.5d, -0.5d), v[2]);
            v[0] = new Complex(-7.5d, 0.5d);
            Assert.AreEqual(new Complex(-7.5d, 0.5d), v[0]);
            v[0] = new Complex(-7.5d, 1.5d);
            Assert.AreEqual(new Complex(-7.5d, 1.5d), v[0]);
            v[2] = new Complex(-7.5d, 2.5d);
            Assert.AreEqual(new Complex(-7.5d, 2.5d), v[2]);
            v[2] = new Complex(-7.5d, 3.5d);
            Assert.AreEqual(new Complex(-7.5d, 3.5d), v[2]);
            v[2] = new Complex(-7.5d, 4.5d);
            Assert.AreEqual(new Complex(-7.5d, 4.5d), v[2]);
            v[0] = new Complex(-7.5d, 5.5d);
            Assert.AreEqual(new Complex(-7.5d, 5.5d), v[0]);
            v[0] = new Complex(-7.5d, 6.5d);
            Assert.AreEqual(new Complex(-7.5d, 6.5d), v[0]);
            v[1] = new Complex(-7.5d, 7.5d);
            Assert.AreEqual(new Complex(-7.5d, 7.5d), v[1]);
            v[0] = new Complex(-7.5d, 8.5d);
            Assert.AreEqual(new Complex(-7.5d, 8.5d), v[0]);
            v[2] = new Complex(-7.5d, 9.5d);
            Assert.AreEqual(new Complex(-7.5d, 9.5d), v[2]);
            v[2] = new Complex(-6.5d, 0.0);
            Assert.AreEqual(new Complex(-6.5d, 0.0), v[2]);
            v[1] = new Complex(-6.5d, 1.0);
            Assert.AreEqual(new Complex(-6.5d, 1.0), v[1]);
            v[0] = new Complex(-6.5d, 2d);
            Assert.AreEqual(new Complex(-6.5d, 2d), v[0]);
            v[2] = new Complex(-6.5d, 3d);
            Assert.AreEqual(new Complex(-6.5d, 3d), v[2]);
            v[3] = new Complex(-6.5d, 4d);
            Assert.AreEqual(new Complex(-6.5d, 4d), v[3]);
            v[0] = new Complex(-6.5d, 5d);
            Assert.AreEqual(new Complex(-6.5d, 5d), v[0]);
            v[2] = new Complex(-6.5d, 6d);
            Assert.AreEqual(new Complex(-6.5d, 6d), v[2]);
            v[3] = new Complex(-6.5d, 7d);
            Assert.AreEqual(new Complex(-6.5d, 7d), v[3]);
            v[0] = new Complex(-6.5d, 8d);
            Assert.AreEqual(new Complex(-6.5d, 8d), v[0]);
            v[3] = new Complex(-6.5d, 9d);
            Assert.AreEqual(new Complex(-6.5d, 9d), v[3]);
            v[1] = new Complex(-6.5d, -1d);
            Assert.AreEqual(new Complex(-6.5d, -1d), v[1]);
            v[0] = new Complex(-6.5d, -2d);
            Assert.AreEqual(new Complex(-6.5d, -2d), v[0]);
            v[2] = new Complex(-6.5d, -3d);
            Assert.AreEqual(new Complex(-6.5d, -3d), v[2]);
            v[2] = new Complex(-6.5d, -4d);
            Assert.AreEqual(new Complex(-6.5d, -4d), v[2]);
            v[2] = new Complex(-6.5d, -5d);
            Assert.AreEqual(new Complex(-6.5d, -5d), v[2]);
            v[3] = new Complex(-6.5d, -6d);
            Assert.AreEqual(new Complex(-6.5d, -6d), v[3]);
            v[3] = new Complex(-6.5d, -7d);
            Assert.AreEqual(new Complex(-6.5d, -7d), v[3]);
            v[0] = new Complex(-6.5d, -8d);
            Assert.AreEqual(new Complex(-6.5d, -8d), v[0]);
            v[0] = new Complex(-6.5d, -9d);
            Assert.AreEqual(new Complex(-6.5d, -9d), v[0]);
            v[1] = new Complex(-6.5d, -9.5d);
            Assert.AreEqual(new Complex(-6.5d, -9.5d), v[1]);
            v[3] = new Complex(-6.5d, -8.5d);
            Assert.AreEqual(new Complex(-6.5d, -8.5d), v[3]);
            v[0] = new Complex(-6.5d, -7.5d);
            Assert.AreEqual(new Complex(-6.5d, -7.5d), v[0]);
            v[2] = new Complex(-6.5d, -6.5d);
            Assert.AreEqual(new Complex(-6.5d, -6.5d), v[2]);
            v[1] = new Complex(-6.5d, -5.5d);
            Assert.AreEqual(new Complex(-6.5d, -5.5d), v[1]);
            v[0] = new Complex(-6.5d, -4.5d);
            Assert.AreEqual(new Complex(-6.5d, -4.5d), v[0]);
            v[2] = new Complex(-6.5d, -3.5d);
            Assert.AreEqual(new Complex(-6.5d, -3.5d), v[2]);
            v[1] = new Complex(-6.5d, -2.5d);
            Assert.AreEqual(new Complex(-6.5d, -2.5d), v[1]);
            v[2] = new Complex(-6.5d, -1.5d);
            Assert.AreEqual(new Complex(-6.5d, -1.5d), v[2]);
            v[0] = new Complex(-6.5d, -0.5d);
            Assert.AreEqual(new Complex(-6.5d, -0.5d), v[0]);
            v[1] = new Complex(-6.5d, 0.5d);
            Assert.AreEqual(new Complex(-6.5d, 0.5d), v[1]);
            v[0] = new Complex(-6.5d, 1.5d);
            Assert.AreEqual(new Complex(-6.5d, 1.5d), v[0]);
            v[0] = new Complex(-6.5d, 2.5d);
            Assert.AreEqual(new Complex(-6.5d, 2.5d), v[0]);
            v[0] = new Complex(-6.5d, 3.5d);
            Assert.AreEqual(new Complex(-6.5d, 3.5d), v[0]);
            v[2] = new Complex(-6.5d, 4.5d);
            Assert.AreEqual(new Complex(-6.5d, 4.5d), v[2]);
            v[1] = new Complex(-6.5d, 5.5d);
            Assert.AreEqual(new Complex(-6.5d, 5.5d), v[1]);
            v[2] = new Complex(-6.5d, 6.5d);
            Assert.AreEqual(new Complex(-6.5d, 6.5d), v[2]);
            v[3] = new Complex(-6.5d, 7.5d);
            Assert.AreEqual(new Complex(-6.5d, 7.5d), v[3]);
            v[2] = new Complex(-6.5d, 8.5d);
            Assert.AreEqual(new Complex(-6.5d, 8.5d), v[2]);
            v[2] = new Complex(-6.5d, 9.5d);
            Assert.AreEqual(new Complex(-6.5d, 9.5d), v[2]);
            v[1] = new Complex(-5.5d, 0.0);
            Assert.AreEqual(new Complex(-5.5d, 0.0), v[1]);
            v[2] = new Complex(-5.5d, 1.0);
            Assert.AreEqual(new Complex(-5.5d, 1.0), v[2]);
            v[2] = new Complex(-5.5d, 2d);
            Assert.AreEqual(new Complex(-5.5d, 2d), v[2]);
            v[0] = new Complex(-5.5d, 3d);
            Assert.AreEqual(new Complex(-5.5d, 3d), v[0]);
            v[3] = new Complex(-5.5d, 4d);
            Assert.AreEqual(new Complex(-5.5d, 4d), v[3]);
            v[1] = new Complex(-5.5d, 5d);
            Assert.AreEqual(new Complex(-5.5d, 5d), v[1]);
            v[0] = new Complex(-5.5d, 6d);
            Assert.AreEqual(new Complex(-5.5d, 6d), v[0]);
            v[2] = new Complex(-5.5d, 7d);
            Assert.AreEqual(new Complex(-5.5d, 7d), v[2]);
            v[0] = new Complex(-5.5d, 8d);
            Assert.AreEqual(new Complex(-5.5d, 8d), v[0]);
            v[3] = new Complex(-5.5d, 9d);
            Assert.AreEqual(new Complex(-5.5d, 9d), v[3]);
            v[3] = new Complex(-5.5d, -1d);
            Assert.AreEqual(new Complex(-5.5d, -1d), v[3]);
            v[1] = new Complex(-5.5d, -2d);
            Assert.AreEqual(new Complex(-5.5d, -2d), v[1]);
            v[0] = new Complex(-5.5d, -3d);
            Assert.AreEqual(new Complex(-5.5d, -3d), v[0]);
            v[0] = new Complex(-5.5d, -4d);
            Assert.AreEqual(new Complex(-5.5d, -4d), v[0]);
            v[2] = new Complex(-5.5d, -5d);
            Assert.AreEqual(new Complex(-5.5d, -5d), v[2]);
            v[2] = new Complex(-5.5d, -6d);
            Assert.AreEqual(new Complex(-5.5d, -6d), v[2]);
            v[1] = new Complex(-5.5d, -7d);
            Assert.AreEqual(new Complex(-5.5d, -7d), v[1]);
            v[3] = new Complex(-5.5d, -8d);
            Assert.AreEqual(new Complex(-5.5d, -8d), v[3]);
            v[3] = new Complex(-5.5d, -9d);
            Assert.AreEqual(new Complex(-5.5d, -9d), v[3]);
            v[1] = new Complex(-5.5d, -9.5d);
            Assert.AreEqual(new Complex(-5.5d, -9.5d), v[1]);
            v[0] = new Complex(-5.5d, -8.5d);
            Assert.AreEqual(new Complex(-5.5d, -8.5d), v[0]);
            v[3] = new Complex(-5.5d, -7.5d);
            Assert.AreEqual(new Complex(-5.5d, -7.5d), v[3]);
            v[0] = new Complex(-5.5d, -6.5d);
            Assert.AreEqual(new Complex(-5.5d, -6.5d), v[0]);
            v[3] = new Complex(-5.5d, -5.5d);
            Assert.AreEqual(new Complex(-5.5d, -5.5d), v[3]);
            v[3] = new Complex(-5.5d, -4.5d);
            Assert.AreEqual(new Complex(-5.5d, -4.5d), v[3]);
            v[3] = new Complex(-5.5d, -3.5d);
            Assert.AreEqual(new Complex(-5.5d, -3.5d), v[3]);
            v[0] = new Complex(-5.5d, -2.5d);
            Assert.AreEqual(new Complex(-5.5d, -2.5d), v[0]);
            v[0] = new Complex(-5.5d, -1.5d);
            Assert.AreEqual(new Complex(-5.5d, -1.5d), v[0]);
            v[3] = new Complex(-5.5d, -0.5d);
            Assert.AreEqual(new Complex(-5.5d, -0.5d), v[3]);
            v[0] = new Complex(-5.5d, 0.5d);
            Assert.AreEqual(new Complex(-5.5d, 0.5d), v[0]);
            v[3] = new Complex(-5.5d, 1.5d);
            Assert.AreEqual(new Complex(-5.5d, 1.5d), v[3]);
            v[3] = new Complex(-5.5d, 2.5d);
            Assert.AreEqual(new Complex(-5.5d, 2.5d), v[3]);
            v[0] = new Complex(-5.5d, 3.5d);
            Assert.AreEqual(new Complex(-5.5d, 3.5d), v[0]);
            v[1] = new Complex(-5.5d, 4.5d);
            Assert.AreEqual(new Complex(-5.5d, 4.5d), v[1]);
            v[3] = new Complex(-5.5d, 5.5d);
            Assert.AreEqual(new Complex(-5.5d, 5.5d), v[3]);
            v[3] = new Complex(-5.5d, 6.5d);
            Assert.AreEqual(new Complex(-5.5d, 6.5d), v[3]);
            v[1] = new Complex(-5.5d, 7.5d);
            Assert.AreEqual(new Complex(-5.5d, 7.5d), v[1]);
            v[0] = new Complex(-5.5d, 8.5d);
            Assert.AreEqual(new Complex(-5.5d, 8.5d), v[0]);
            v[3] = new Complex(-5.5d, 9.5d);
            Assert.AreEqual(new Complex(-5.5d, 9.5d), v[3]);
            v[0] = new Complex(-4.5d, 0.0);
            Assert.AreEqual(new Complex(-4.5d, 0.0), v[0]);
            v[0] = new Complex(-4.5d, 1.0);
            Assert.AreEqual(new Complex(-4.5d, 1.0), v[0]);
            v[0] = new Complex(-4.5d, 2d);
            Assert.AreEqual(new Complex(-4.5d, 2d), v[0]);
            v[0] = new Complex(-4.5d, 3d);
            Assert.AreEqual(new Complex(-4.5d, 3d), v[0]);
            v[2] = new Complex(-4.5d, 4d);
            Assert.AreEqual(new Complex(-4.5d, 4d), v[2]);
            v[1] = new Complex(-4.5d, 5d);
            Assert.AreEqual(new Complex(-4.5d, 5d), v[1]);
            v[0] = new Complex(-4.5d, 6d);
            Assert.AreEqual(new Complex(-4.5d, 6d), v[0]);
            v[3] = new Complex(-4.5d, 7d);
            Assert.AreEqual(new Complex(-4.5d, 7d), v[3]);
            v[0] = new Complex(-4.5d, 8d);
            Assert.AreEqual(new Complex(-4.5d, 8d), v[0]);
            v[1] = new Complex(-4.5d, 9d);
            Assert.AreEqual(new Complex(-4.5d, 9d), v[1]);
            v[3] = new Complex(-4.5d, -1d);
            Assert.AreEqual(new Complex(-4.5d, -1d), v[3]);
            v[3] = new Complex(-4.5d, -2d);
            Assert.AreEqual(new Complex(-4.5d, -2d), v[3]);
            v[3] = new Complex(-4.5d, -3d);
            Assert.AreEqual(new Complex(-4.5d, -3d), v[3]);
            v[0] = new Complex(-4.5d, -4d);
            Assert.AreEqual(new Complex(-4.5d, -4d), v[0]);
            v[1] = new Complex(-4.5d, -5d);
            Assert.AreEqual(new Complex(-4.5d, -5d), v[1]);
            v[1] = new Complex(-4.5d, -6d);
            Assert.AreEqual(new Complex(-4.5d, -6d), v[1]);
            v[2] = new Complex(-4.5d, -7d);
            Assert.AreEqual(new Complex(-4.5d, -7d), v[2]);
            v[1] = new Complex(-4.5d, -8d);
            Assert.AreEqual(new Complex(-4.5d, -8d), v[1]);
            v[2] = new Complex(-4.5d, -9d);
            Assert.AreEqual(new Complex(-4.5d, -9d), v[2]);
            v[1] = new Complex(-4.5d, -9.5d);
            Assert.AreEqual(new Complex(-4.5d, -9.5d), v[1]);
            v[3] = new Complex(-4.5d, -8.5d);
            Assert.AreEqual(new Complex(-4.5d, -8.5d), v[3]);
            v[1] = new Complex(-4.5d, -7.5d);
            Assert.AreEqual(new Complex(-4.5d, -7.5d), v[1]);
            v[0] = new Complex(-4.5d, -6.5d);
            Assert.AreEqual(new Complex(-4.5d, -6.5d), v[0]);
            v[2] = new Complex(-4.5d, -5.5d);
            Assert.AreEqual(new Complex(-4.5d, -5.5d), v[2]);
            v[3] = new Complex(-4.5d, -4.5d);
            Assert.AreEqual(new Complex(-4.5d, -4.5d), v[3]);
            v[3] = new Complex(-4.5d, -3.5d);
            Assert.AreEqual(new Complex(-4.5d, -3.5d), v[3]);
            v[3] = new Complex(-4.5d, -2.5d);
            Assert.AreEqual(new Complex(-4.5d, -2.5d), v[3]);
            v[0] = new Complex(-4.5d, -1.5d);
            Assert.AreEqual(new Complex(-4.5d, -1.5d), v[0]);
            v[3] = new Complex(-4.5d, -0.5d);
            Assert.AreEqual(new Complex(-4.5d, -0.5d), v[3]);
            v[1] = new Complex(-4.5d, 0.5d);
            Assert.AreEqual(new Complex(-4.5d, 0.5d), v[1]);
            v[3] = new Complex(-4.5d, 1.5d);
            Assert.AreEqual(new Complex(-4.5d, 1.5d), v[3]);
            v[1] = new Complex(-4.5d, 2.5d);
            Assert.AreEqual(new Complex(-4.5d, 2.5d), v[1]);
            v[1] = new Complex(-4.5d, 3.5d);
            Assert.AreEqual(new Complex(-4.5d, 3.5d), v[1]);
            v[0] = new Complex(-4.5d, 4.5d);
            Assert.AreEqual(new Complex(-4.5d, 4.5d), v[0]);
            v[3] = new Complex(-4.5d, 5.5d);
            Assert.AreEqual(new Complex(-4.5d, 5.5d), v[3]);
            v[0] = new Complex(-4.5d, 6.5d);
            Assert.AreEqual(new Complex(-4.5d, 6.5d), v[0]);
            v[0] = new Complex(-4.5d, 7.5d);
            Assert.AreEqual(new Complex(-4.5d, 7.5d), v[0]);
            v[2] = new Complex(-4.5d, 8.5d);
            Assert.AreEqual(new Complex(-4.5d, 8.5d), v[2]);
            v[2] = new Complex(-4.5d, 9.5d);
            Assert.AreEqual(new Complex(-4.5d, 9.5d), v[2]);
            v[2] = new Complex(-3.5d, 0.0);
            Assert.AreEqual(new Complex(-3.5d, 0.0), v[2]);
            v[3] = new Complex(-3.5d, 1.0);
            Assert.AreEqual(new Complex(-3.5d, 1.0), v[3]);
            v[0] = new Complex(-3.5d, 2d);
            Assert.AreEqual(new Complex(-3.5d, 2d), v[0]);
            v[3] = new Complex(-3.5d, 3d);
            Assert.AreEqual(new Complex(-3.5d, 3d), v[3]);
            v[2] = new Complex(-3.5d, 4d);
            Assert.AreEqual(new Complex(-3.5d, 4d), v[2]);
            v[0] = new Complex(-3.5d, 5d);
            Assert.AreEqual(new Complex(-3.5d, 5d), v[0]);
            v[1] = new Complex(-3.5d, 6d);
            Assert.AreEqual(new Complex(-3.5d, 6d), v[1]);
            v[3] = new Complex(-3.5d, 7d);
            Assert.AreEqual(new Complex(-3.5d, 7d), v[3]);
            v[3] = new Complex(-3.5d, 8d);
            Assert.AreEqual(new Complex(-3.5d, 8d), v[3]);
            v[3] = new Complex(-3.5d, 9d);
            Assert.AreEqual(new Complex(-3.5d, 9d), v[3]);
            v[0] = new Complex(-3.5d, -1d);
            Assert.AreEqual(new Complex(-3.5d, -1d), v[0]);
            v[0] = new Complex(-3.5d, -2d);
            Assert.AreEqual(new Complex(-3.5d, -2d), v[0]);
            v[2] = new Complex(-3.5d, -3d);
            Assert.AreEqual(new Complex(-3.5d, -3d), v[2]);
            v[3] = new Complex(-3.5d, -4d);
            Assert.AreEqual(new Complex(-3.5d, -4d), v[3]);
            v[3] = new Complex(-3.5d, -5d);
            Assert.AreEqual(new Complex(-3.5d, -5d), v[3]);
            v[3] = new Complex(-3.5d, -6d);
            Assert.AreEqual(new Complex(-3.5d, -6d), v[3]);
            v[2] = new Complex(-3.5d, -7d);
            Assert.AreEqual(new Complex(-3.5d, -7d), v[2]);
            v[0] = new Complex(-3.5d, -8d);
            Assert.AreEqual(new Complex(-3.5d, -8d), v[0]);
            v[2] = new Complex(-3.5d, -9d);
            Assert.AreEqual(new Complex(-3.5d, -9d), v[2]);
            v[1] = new Complex(-3.5d, -9.5d);
            Assert.AreEqual(new Complex(-3.5d, -9.5d), v[1]);
            v[2] = new Complex(-3.5d, -8.5d);
            Assert.AreEqual(new Complex(-3.5d, -8.5d), v[2]);
            v[1] = new Complex(-3.5d, -7.5d);
            Assert.AreEqual(new Complex(-3.5d, -7.5d), v[1]);
            v[3] = new Complex(-3.5d, -6.5d);
            Assert.AreEqual(new Complex(-3.5d, -6.5d), v[3]);
            v[0] = new Complex(-3.5d, -5.5d);
            Assert.AreEqual(new Complex(-3.5d, -5.5d), v[0]);
            v[3] = new Complex(-3.5d, -4.5d);
            Assert.AreEqual(new Complex(-3.5d, -4.5d), v[3]);
            v[2] = new Complex(-3.5d, -3.5d);
            Assert.AreEqual(new Complex(-3.5d, -3.5d), v[2]);
            v[2] = new Complex(-3.5d, -2.5d);
            Assert.AreEqual(new Complex(-3.5d, -2.5d), v[2]);
            v[2] = new Complex(-3.5d, -1.5d);
            Assert.AreEqual(new Complex(-3.5d, -1.5d), v[2]);
            v[3] = new Complex(-3.5d, -0.5d);
            Assert.AreEqual(new Complex(-3.5d, -0.5d), v[3]);
            v[1] = new Complex(-3.5d, 0.5d);
            Assert.AreEqual(new Complex(-3.5d, 0.5d), v[1]);
            v[0] = new Complex(-3.5d, 1.5d);
            Assert.AreEqual(new Complex(-3.5d, 1.5d), v[0]);
            v[1] = new Complex(-3.5d, 2.5d);
            Assert.AreEqual(new Complex(-3.5d, 2.5d), v[1]);
            v[0] = new Complex(-3.5d, 3.5d);
            Assert.AreEqual(new Complex(-3.5d, 3.5d), v[0]);
            v[3] = new Complex(-3.5d, 4.5d);
            Assert.AreEqual(new Complex(-3.5d, 4.5d), v[3]);
            v[3] = new Complex(-3.5d, 5.5d);
            Assert.AreEqual(new Complex(-3.5d, 5.5d), v[3]);
            v[1] = new Complex(-3.5d, 6.5d);
            Assert.AreEqual(new Complex(-3.5d, 6.5d), v[1]);
            v[3] = new Complex(-3.5d, 7.5d);
            Assert.AreEqual(new Complex(-3.5d, 7.5d), v[3]);
            v[1] = new Complex(-3.5d, 8.5d);
            Assert.AreEqual(new Complex(-3.5d, 8.5d), v[1]);
            v[1] = new Complex(-3.5d, 9.5d);
            Assert.AreEqual(new Complex(-3.5d, 9.5d), v[1]);
            v[2] = new Complex(-2.5d, 0.0);
            Assert.AreEqual(new Complex(-2.5d, 0.0), v[2]);
            v[2] = new Complex(-2.5d, 1.0);
            Assert.AreEqual(new Complex(-2.5d, 1.0), v[2]);
            v[3] = new Complex(-2.5d, 2d);
            Assert.AreEqual(new Complex(-2.5d, 2d), v[3]);
            v[0] = new Complex(-2.5d, 3d);
            Assert.AreEqual(new Complex(-2.5d, 3d), v[0]);
            v[0] = new Complex(-2.5d, 4d);
            Assert.AreEqual(new Complex(-2.5d, 4d), v[0]);
            v[3] = new Complex(-2.5d, 5d);
            Assert.AreEqual(new Complex(-2.5d, 5d), v[3]);
            v[0] = new Complex(-2.5d, 6d);
            Assert.AreEqual(new Complex(-2.5d, 6d), v[0]);
            v[1] = new Complex(-2.5d, 7d);
            Assert.AreEqual(new Complex(-2.5d, 7d), v[1]);
            v[1] = new Complex(-2.5d, 8d);
            Assert.AreEqual(new Complex(-2.5d, 8d), v[1]);
            v[2] = new Complex(-2.5d, 9d);
            Assert.AreEqual(new Complex(-2.5d, 9d), v[2]);
            v[0] = new Complex(-2.5d, -1d);
            Assert.AreEqual(new Complex(-2.5d, -1d), v[0]);
            v[0] = new Complex(-2.5d, -2d);
            Assert.AreEqual(new Complex(-2.5d, -2d), v[0]);
            v[0] = new Complex(-2.5d, -3d);
            Assert.AreEqual(new Complex(-2.5d, -3d), v[0]);
            v[1] = new Complex(-2.5d, -4d);
            Assert.AreEqual(new Complex(-2.5d, -4d), v[1]);
            v[1] = new Complex(-2.5d, -5d);
            Assert.AreEqual(new Complex(-2.5d, -5d), v[1]);
            v[3] = new Complex(-2.5d, -6d);
            Assert.AreEqual(new Complex(-2.5d, -6d), v[3]);
            v[0] = new Complex(-2.5d, -7d);
            Assert.AreEqual(new Complex(-2.5d, -7d), v[0]);
            v[3] = new Complex(-2.5d, -8d);
            Assert.AreEqual(new Complex(-2.5d, -8d), v[3]);
            v[3] = new Complex(-2.5d, -9d);
            Assert.AreEqual(new Complex(-2.5d, -9d), v[3]);
            v[0] = new Complex(-2.5d, -9.5d);
            Assert.AreEqual(new Complex(-2.5d, -9.5d), v[0]);
            v[0] = new Complex(-2.5d, -8.5d);
            Assert.AreEqual(new Complex(-2.5d, -8.5d), v[0]);
            v[2] = new Complex(-2.5d, -7.5d);
            Assert.AreEqual(new Complex(-2.5d, -7.5d), v[2]);
            v[2] = new Complex(-2.5d, -6.5d);
            Assert.AreEqual(new Complex(-2.5d, -6.5d), v[2]);
            v[0] = new Complex(-2.5d, -5.5d);
            Assert.AreEqual(new Complex(-2.5d, -5.5d), v[0]);
            v[1] = new Complex(-2.5d, -4.5d);
            Assert.AreEqual(new Complex(-2.5d, -4.5d), v[1]);
            v[3] = new Complex(-2.5d, -3.5d);
            Assert.AreEqual(new Complex(-2.5d, -3.5d), v[3]);
            v[2] = new Complex(-2.5d, -2.5d);
            Assert.AreEqual(new Complex(-2.5d, -2.5d), v[2]);
            v[0] = new Complex(-2.5d, -1.5d);
            Assert.AreEqual(new Complex(-2.5d, -1.5d), v[0]);
            v[2] = new Complex(-2.5d, -0.5d);
            Assert.AreEqual(new Complex(-2.5d, -0.5d), v[2]);
            v[3] = new Complex(-2.5d, 0.5d);
            Assert.AreEqual(new Complex(-2.5d, 0.5d), v[3]);
            v[1] = new Complex(-2.5d, 1.5d);
            Assert.AreEqual(new Complex(-2.5d, 1.5d), v[1]);
            v[0] = new Complex(-2.5d, 2.5d);
            Assert.AreEqual(new Complex(-2.5d, 2.5d), v[0]);
            v[0] = new Complex(-2.5d, 3.5d);
            Assert.AreEqual(new Complex(-2.5d, 3.5d), v[0]);
            v[2] = new Complex(-2.5d, 4.5d);
            Assert.AreEqual(new Complex(-2.5d, 4.5d), v[2]);
            v[0] = new Complex(-2.5d, 5.5d);
            Assert.AreEqual(new Complex(-2.5d, 5.5d), v[0]);
            v[2] = new Complex(-2.5d, 6.5d);
            Assert.AreEqual(new Complex(-2.5d, 6.5d), v[2]);
            v[2] = new Complex(-2.5d, 7.5d);
            Assert.AreEqual(new Complex(-2.5d, 7.5d), v[2]);
            v[1] = new Complex(-2.5d, 8.5d);
            Assert.AreEqual(new Complex(-2.5d, 8.5d), v[1]);
            v[3] = new Complex(-2.5d, 9.5d);
            Assert.AreEqual(new Complex(-2.5d, 9.5d), v[3]);
            v[1] = new Complex(-1.5d, 0.0);
            Assert.AreEqual(new Complex(-1.5d, 0.0), v[1]);
            v[2] = new Complex(-1.5d, 1.0);
            Assert.AreEqual(new Complex(-1.5d, 1.0), v[2]);
            v[0] = new Complex(-1.5d, 2d);
            Assert.AreEqual(new Complex(-1.5d, 2d), v[0]);
            v[0] = new Complex(-1.5d, 3d);
            Assert.AreEqual(new Complex(-1.5d, 3d), v[0]);
            v[0] = new Complex(-1.5d, 4d);
            Assert.AreEqual(new Complex(-1.5d, 4d), v[0]);
            v[3] = new Complex(-1.5d, 5d);
            Assert.AreEqual(new Complex(-1.5d, 5d), v[3]);
            v[0] = new Complex(-1.5d, 6d);
            Assert.AreEqual(new Complex(-1.5d, 6d), v[0]);
            v[0] = new Complex(-1.5d, 7d);
            Assert.AreEqual(new Complex(-1.5d, 7d), v[0]);
            v[3] = new Complex(-1.5d, 8d);
            Assert.AreEqual(new Complex(-1.5d, 8d), v[3]);
            v[2] = new Complex(-1.5d, 9d);
            Assert.AreEqual(new Complex(-1.5d, 9d), v[2]);
            v[3] = new Complex(-1.5d, -1d);
            Assert.AreEqual(new Complex(-1.5d, -1d), v[3]);
            v[2] = new Complex(-1.5d, -2d);
            Assert.AreEqual(new Complex(-1.5d, -2d), v[2]);
            v[1] = new Complex(-1.5d, -3d);
            Assert.AreEqual(new Complex(-1.5d, -3d), v[1]);
            v[3] = new Complex(-1.5d, -4d);
            Assert.AreEqual(new Complex(-1.5d, -4d), v[3]);
            v[1] = new Complex(-1.5d, -5d);
            Assert.AreEqual(new Complex(-1.5d, -5d), v[1]);
            v[1] = new Complex(-1.5d, -6d);
            Assert.AreEqual(new Complex(-1.5d, -6d), v[1]);
            v[3] = new Complex(-1.5d, -7d);
            Assert.AreEqual(new Complex(-1.5d, -7d), v[3]);
            v[0] = new Complex(-1.5d, -8d);
            Assert.AreEqual(new Complex(-1.5d, -8d), v[0]);
            v[3] = new Complex(-1.5d, -9d);
            Assert.AreEqual(new Complex(-1.5d, -9d), v[3]);
            v[2] = new Complex(-1.5d, -9.5d);
            Assert.AreEqual(new Complex(-1.5d, -9.5d), v[2]);
            v[1] = new Complex(-1.5d, -8.5d);
            Assert.AreEqual(new Complex(-1.5d, -8.5d), v[1]);
            v[0] = new Complex(-1.5d, -7.5d);
            Assert.AreEqual(new Complex(-1.5d, -7.5d), v[0]);
            v[0] = new Complex(-1.5d, -6.5d);
            Assert.AreEqual(new Complex(-1.5d, -6.5d), v[0]);
            v[2] = new Complex(-1.5d, -5.5d);
            Assert.AreEqual(new Complex(-1.5d, -5.5d), v[2]);
            v[2] = new Complex(-1.5d, -4.5d);
            Assert.AreEqual(new Complex(-1.5d, -4.5d), v[2]);
            v[0] = new Complex(-1.5d, -3.5d);
            Assert.AreEqual(new Complex(-1.5d, -3.5d), v[0]);
            v[3] = new Complex(-1.5d, -2.5d);
            Assert.AreEqual(new Complex(-1.5d, -2.5d), v[3]);
            v[0] = new Complex(-1.5d, -1.5d);
            Assert.AreEqual(new Complex(-1.5d, -1.5d), v[0]);
            v[1] = new Complex(-1.5d, -0.5d);
            Assert.AreEqual(new Complex(-1.5d, -0.5d), v[1]);
            v[1] = new Complex(-1.5d, 0.5d);
            Assert.AreEqual(new Complex(-1.5d, 0.5d), v[1]);
            v[2] = new Complex(-1.5d, 1.5d);
            Assert.AreEqual(new Complex(-1.5d, 1.5d), v[2]);
            v[1] = new Complex(-1.5d, 2.5d);
            Assert.AreEqual(new Complex(-1.5d, 2.5d), v[1]);
            v[3] = new Complex(-1.5d, 3.5d);
            Assert.AreEqual(new Complex(-1.5d, 3.5d), v[3]);
            v[0] = new Complex(-1.5d, 4.5d);
            Assert.AreEqual(new Complex(-1.5d, 4.5d), v[0]);
            v[2] = new Complex(-1.5d, 5.5d);
            Assert.AreEqual(new Complex(-1.5d, 5.5d), v[2]);
            v[1] = new Complex(-1.5d, 6.5d);
            Assert.AreEqual(new Complex(-1.5d, 6.5d), v[1]);
            v[3] = new Complex(-1.5d, 7.5d);
            Assert.AreEqual(new Complex(-1.5d, 7.5d), v[3]);
            v[1] = new Complex(-1.5d, 8.5d);
            Assert.AreEqual(new Complex(-1.5d, 8.5d), v[1]);
            v[2] = new Complex(-1.5d, 9.5d);
            Assert.AreEqual(new Complex(-1.5d, 9.5d), v[2]);
            v[0] = new Complex(-0.5d, 0.0);
            Assert.AreEqual(new Complex(-0.5d, 0.0), v[0]);
            v[0] = new Complex(-0.5d, 1.0);
            Assert.AreEqual(new Complex(-0.5d, 1.0), v[0]);
            v[2] = new Complex(-0.5d, 2d);
            Assert.AreEqual(new Complex(-0.5d, 2d), v[2]);
            v[2] = new Complex(-0.5d, 3d);
            Assert.AreEqual(new Complex(-0.5d, 3d), v[2]);
            v[1] = new Complex(-0.5d, 4d);
            Assert.AreEqual(new Complex(-0.5d, 4d), v[1]);
            v[2] = new Complex(-0.5d, 5d);
            Assert.AreEqual(new Complex(-0.5d, 5d), v[2]);
            v[0] = new Complex(-0.5d, 6d);
            Assert.AreEqual(new Complex(-0.5d, 6d), v[0]);
            v[0] = new Complex(-0.5d, 7d);
            Assert.AreEqual(new Complex(-0.5d, 7d), v[0]);
            v[1] = new Complex(-0.5d, 8d);
            Assert.AreEqual(new Complex(-0.5d, 8d), v[1]);
            v[2] = new Complex(-0.5d, 9d);
            Assert.AreEqual(new Complex(-0.5d, 9d), v[2]);
            v[1] = new Complex(-0.5d, -1d);
            Assert.AreEqual(new Complex(-0.5d, -1d), v[1]);
            v[0] = new Complex(-0.5d, -2d);
            Assert.AreEqual(new Complex(-0.5d, -2d), v[0]);
            v[2] = new Complex(-0.5d, -3d);
            Assert.AreEqual(new Complex(-0.5d, -3d), v[2]);
            v[3] = new Complex(-0.5d, -4d);
            Assert.AreEqual(new Complex(-0.5d, -4d), v[3]);
            v[2] = new Complex(-0.5d, -5d);
            Assert.AreEqual(new Complex(-0.5d, -5d), v[2]);
            v[2] = new Complex(-0.5d, -6d);
            Assert.AreEqual(new Complex(-0.5d, -6d), v[2]);
            v[0] = new Complex(-0.5d, -7d);
            Assert.AreEqual(new Complex(-0.5d, -7d), v[0]);
            v[2] = new Complex(-0.5d, -8d);
            Assert.AreEqual(new Complex(-0.5d, -8d), v[2]);
            v[1] = new Complex(-0.5d, -9d);
            Assert.AreEqual(new Complex(-0.5d, -9d), v[1]);
            v[1] = new Complex(-0.5d, -9.5d);
            Assert.AreEqual(new Complex(-0.5d, -9.5d), v[1]);
            v[0] = new Complex(-0.5d, -8.5d);
            Assert.AreEqual(new Complex(-0.5d, -8.5d), v[0]);
            v[3] = new Complex(-0.5d, -7.5d);
            Assert.AreEqual(new Complex(-0.5d, -7.5d), v[3]);
            v[0] = new Complex(-0.5d, -6.5d);
            Assert.AreEqual(new Complex(-0.5d, -6.5d), v[0]);
            v[2] = new Complex(-0.5d, -5.5d);
            Assert.AreEqual(new Complex(-0.5d, -5.5d), v[2]);
            v[1] = new Complex(-0.5d, -4.5d);
            Assert.AreEqual(new Complex(-0.5d, -4.5d), v[1]);
            v[3] = new Complex(-0.5d, -3.5d);
            Assert.AreEqual(new Complex(-0.5d, -3.5d), v[3]);
            v[2] = new Complex(-0.5d, -2.5d);
            Assert.AreEqual(new Complex(-0.5d, -2.5d), v[2]);
            v[3] = new Complex(-0.5d, -1.5d);
            Assert.AreEqual(new Complex(-0.5d, -1.5d), v[3]);
            v[1] = new Complex(-0.5d, -0.5d);
            Assert.AreEqual(new Complex(-0.5d, -0.5d), v[1]);
            v[0] = new Complex(-0.5d, 0.5d);
            Assert.AreEqual(new Complex(-0.5d, 0.5d), v[0]);
            v[0] = new Complex(-0.5d, 1.5d);
            Assert.AreEqual(new Complex(-0.5d, 1.5d), v[0]);
            v[1] = new Complex(-0.5d, 2.5d);
            Assert.AreEqual(new Complex(-0.5d, 2.5d), v[1]);
            v[1] = new Complex(-0.5d, 3.5d);
            Assert.AreEqual(new Complex(-0.5d, 3.5d), v[1]);
            v[1] = new Complex(-0.5d, 4.5d);
            Assert.AreEqual(new Complex(-0.5d, 4.5d), v[1]);
            v[2] = new Complex(-0.5d, 5.5d);
            Assert.AreEqual(new Complex(-0.5d, 5.5d), v[2]);
            v[2] = new Complex(-0.5d, 6.5d);
            Assert.AreEqual(new Complex(-0.5d, 6.5d), v[2]);
            v[2] = new Complex(-0.5d, 7.5d);
            Assert.AreEqual(new Complex(-0.5d, 7.5d), v[2]);
            v[1] = new Complex(-0.5d, 8.5d);
            Assert.AreEqual(new Complex(-0.5d, 8.5d), v[1]);
            v[2] = new Complex(-0.5d, 9.5d);
            Assert.AreEqual(new Complex(-0.5d, 9.5d), v[2]);
            v[3] = new Complex(0.5d, 0.0);
            Assert.AreEqual(new Complex(0.5d, 0.0), v[3]);
            v[2] = new Complex(0.5d, 1.0);
            Assert.AreEqual(new Complex(0.5d, 1.0), v[2]);
            v[0] = new Complex(0.5d, 2d);
            Assert.AreEqual(new Complex(0.5d, 2d), v[0]);
            v[2] = new Complex(0.5d, 3d);
            Assert.AreEqual(new Complex(0.5d, 3d), v[2]);
            v[1] = new Complex(0.5d, 4d);
            Assert.AreEqual(new Complex(0.5d, 4d), v[1]);
            v[3] = new Complex(0.5d, 5d);
            Assert.AreEqual(new Complex(0.5d, 5d), v[3]);
            v[1] = new Complex(0.5d, 6d);
            Assert.AreEqual(new Complex(0.5d, 6d), v[1]);
            v[0] = new Complex(0.5d, 7d);
            Assert.AreEqual(new Complex(0.5d, 7d), v[0]);
            v[1] = new Complex(0.5d, 8d);
            Assert.AreEqual(new Complex(0.5d, 8d), v[1]);
            v[1] = new Complex(0.5d, 9d);
            Assert.AreEqual(new Complex(0.5d, 9d), v[1]);
            v[2] = new Complex(0.5d, -1d);
            Assert.AreEqual(new Complex(0.5d, -1d), v[2]);
            v[2] = new Complex(0.5d, -2d);
            Assert.AreEqual(new Complex(0.5d, -2d), v[2]);
            v[2] = new Complex(0.5d, -3d);
            Assert.AreEqual(new Complex(0.5d, -3d), v[2]);
            v[2] = new Complex(0.5d, -4d);
            Assert.AreEqual(new Complex(0.5d, -4d), v[2]);
            v[0] = new Complex(0.5d, -5d);
            Assert.AreEqual(new Complex(0.5d, -5d), v[0]);
            v[2] = new Complex(0.5d, -6d);
            Assert.AreEqual(new Complex(0.5d, -6d), v[2]);
            v[1] = new Complex(0.5d, -7d);
            Assert.AreEqual(new Complex(0.5d, -7d), v[1]);
            v[3] = new Complex(0.5d, -8d);
            Assert.AreEqual(new Complex(0.5d, -8d), v[3]);
            v[3] = new Complex(0.5d, -9d);
            Assert.AreEqual(new Complex(0.5d, -9d), v[3]);
            v[1] = new Complex(0.5d, -9.5d);
            Assert.AreEqual(new Complex(0.5d, -9.5d), v[1]);
            v[1] = new Complex(0.5d, -8.5d);
            Assert.AreEqual(new Complex(0.5d, -8.5d), v[1]);
            v[0] = new Complex(0.5d, -7.5d);
            Assert.AreEqual(new Complex(0.5d, -7.5d), v[0]);
            v[1] = new Complex(0.5d, -6.5d);
            Assert.AreEqual(new Complex(0.5d, -6.5d), v[1]);
            v[2] = new Complex(0.5d, -5.5d);
            Assert.AreEqual(new Complex(0.5d, -5.5d), v[2]);
            v[0] = new Complex(0.5d, -4.5d);
            Assert.AreEqual(new Complex(0.5d, -4.5d), v[0]);
            v[2] = new Complex(0.5d, -3.5d);
            Assert.AreEqual(new Complex(0.5d, -3.5d), v[2]);
            v[0] = new Complex(0.5d, -2.5d);
            Assert.AreEqual(new Complex(0.5d, -2.5d), v[0]);
            v[2] = new Complex(0.5d, -1.5d);
            Assert.AreEqual(new Complex(0.5d, -1.5d), v[2]);
            v[0] = new Complex(0.5d, -0.5d);
            Assert.AreEqual(new Complex(0.5d, -0.5d), v[0]);
            v[0] = new Complex(0.5d, 0.5d);
            Assert.AreEqual(new Complex(0.5d, 0.5d), v[0]);
            v[0] = new Complex(0.5d, 1.5d);
            Assert.AreEqual(new Complex(0.5d, 1.5d), v[0]);
            v[3] = new Complex(0.5d, 2.5d);
            Assert.AreEqual(new Complex(0.5d, 2.5d), v[3]);
            v[2] = new Complex(0.5d, 3.5d);
            Assert.AreEqual(new Complex(0.5d, 3.5d), v[2]);
            v[0] = new Complex(0.5d, 4.5d);
            Assert.AreEqual(new Complex(0.5d, 4.5d), v[0]);
            v[2] = new Complex(0.5d, 5.5d);
            Assert.AreEqual(new Complex(0.5d, 5.5d), v[2]);
            v[3] = new Complex(0.5d, 6.5d);
            Assert.AreEqual(new Complex(0.5d, 6.5d), v[3]);
            v[3] = new Complex(0.5d, 7.5d);
            Assert.AreEqual(new Complex(0.5d, 7.5d), v[3]);
            v[1] = new Complex(0.5d, 8.5d);
            Assert.AreEqual(new Complex(0.5d, 8.5d), v[1]);
            v[3] = new Complex(0.5d, 9.5d);
            Assert.AreEqual(new Complex(0.5d, 9.5d), v[3]);
            v[3] = new Complex(1.5d, 0.0);
            Assert.AreEqual(new Complex(1.5d, 0.0), v[3]);
            v[0] = new Complex(1.5d, 1.0);
            Assert.AreEqual(new Complex(1.5d, 1.0), v[0]);
            v[3] = new Complex(1.5d, 2d);
            Assert.AreEqual(new Complex(1.5d, 2d), v[3]);
            v[0] = new Complex(1.5d, 3d);
            Assert.AreEqual(new Complex(1.5d, 3d), v[0]);
            v[1] = new Complex(1.5d, 4d);
            Assert.AreEqual(new Complex(1.5d, 4d), v[1]);
            v[3] = new Complex(1.5d, 5d);
            Assert.AreEqual(new Complex(1.5d, 5d), v[3]);
            v[2] = new Complex(1.5d, 6d);
            Assert.AreEqual(new Complex(1.5d, 6d), v[2]);
            v[1] = new Complex(1.5d, 7d);
            Assert.AreEqual(new Complex(1.5d, 7d), v[1]);
            v[3] = new Complex(1.5d, 8d);
            Assert.AreEqual(new Complex(1.5d, 8d), v[3]);
            v[1] = new Complex(1.5d, 9d);
            Assert.AreEqual(new Complex(1.5d, 9d), v[1]);
            v[3] = new Complex(1.5d, -1d);
            Assert.AreEqual(new Complex(1.5d, -1d), v[3]);
            v[1] = new Complex(1.5d, -2d);
            Assert.AreEqual(new Complex(1.5d, -2d), v[1]);
            v[2] = new Complex(1.5d, -3d);
            Assert.AreEqual(new Complex(1.5d, -3d), v[2]);
            v[2] = new Complex(1.5d, -4d);
            Assert.AreEqual(new Complex(1.5d, -4d), v[2]);
            v[0] = new Complex(1.5d, -5d);
            Assert.AreEqual(new Complex(1.5d, -5d), v[0]);
            v[0] = new Complex(1.5d, -6d);
            Assert.AreEqual(new Complex(1.5d, -6d), v[0]);
            v[3] = new Complex(1.5d, -7d);
            Assert.AreEqual(new Complex(1.5d, -7d), v[3]);
            v[0] = new Complex(1.5d, -8d);
            Assert.AreEqual(new Complex(1.5d, -8d), v[0]);
            v[1] = new Complex(1.5d, -9d);
            Assert.AreEqual(new Complex(1.5d, -9d), v[1]);
            v[2] = new Complex(1.5d, -9.5d);
            Assert.AreEqual(new Complex(1.5d, -9.5d), v[2]);
            v[3] = new Complex(1.5d, -8.5d);
            Assert.AreEqual(new Complex(1.5d, -8.5d), v[3]);
            v[2] = new Complex(1.5d, -7.5d);
            Assert.AreEqual(new Complex(1.5d, -7.5d), v[2]);
            v[3] = new Complex(1.5d, -6.5d);
            Assert.AreEqual(new Complex(1.5d, -6.5d), v[3]);
            v[0] = new Complex(1.5d, -5.5d);
            Assert.AreEqual(new Complex(1.5d, -5.5d), v[0]);
            v[1] = new Complex(1.5d, -4.5d);
            Assert.AreEqual(new Complex(1.5d, -4.5d), v[1]);
            v[1] = new Complex(1.5d, -3.5d);
            Assert.AreEqual(new Complex(1.5d, -3.5d), v[1]);
            v[2] = new Complex(1.5d, -2.5d);
            Assert.AreEqual(new Complex(1.5d, -2.5d), v[2]);
            v[3] = new Complex(1.5d, -1.5d);
            Assert.AreEqual(new Complex(1.5d, -1.5d), v[3]);
            v[2] = new Complex(1.5d, -0.5d);
            Assert.AreEqual(new Complex(1.5d, -0.5d), v[2]);
            v[3] = new Complex(1.5d, 0.5d);
            Assert.AreEqual(new Complex(1.5d, 0.5d), v[3]);
            v[0] = new Complex(1.5d, 1.5d);
            Assert.AreEqual(new Complex(1.5d, 1.5d), v[0]);
            v[2] = new Complex(1.5d, 2.5d);
            Assert.AreEqual(new Complex(1.5d, 2.5d), v[2]);
            v[0] = new Complex(1.5d, 3.5d);
            Assert.AreEqual(new Complex(1.5d, 3.5d), v[0]);
            v[0] = new Complex(1.5d, 4.5d);
            Assert.AreEqual(new Complex(1.5d, 4.5d), v[0]);
            v[0] = new Complex(1.5d, 5.5d);
            Assert.AreEqual(new Complex(1.5d, 5.5d), v[0]);
            v[1] = new Complex(1.5d, 6.5d);
            Assert.AreEqual(new Complex(1.5d, 6.5d), v[1]);
            v[2] = new Complex(1.5d, 7.5d);
            Assert.AreEqual(new Complex(1.5d, 7.5d), v[2]);
            v[3] = new Complex(1.5d, 8.5d);
            Assert.AreEqual(new Complex(1.5d, 8.5d), v[3]);
            v[3] = new Complex(1.5d, 9.5d);
            Assert.AreEqual(new Complex(1.5d, 9.5d), v[3]);
            v[3] = new Complex(2.5d, 0.0);
            Assert.AreEqual(new Complex(2.5d, 0.0), v[3]);
            v[2] = new Complex(2.5d, 1.0);
            Assert.AreEqual(new Complex(2.5d, 1.0), v[2]);
            v[0] = new Complex(2.5d, 2d);
            Assert.AreEqual(new Complex(2.5d, 2d), v[0]);
            v[1] = new Complex(2.5d, 3d);
            Assert.AreEqual(new Complex(2.5d, 3d), v[1]);
            v[0] = new Complex(2.5d, 4d);
            Assert.AreEqual(new Complex(2.5d, 4d), v[0]);
            v[0] = new Complex(2.5d, 5d);
            Assert.AreEqual(new Complex(2.5d, 5d), v[0]);
            v[2] = new Complex(2.5d, 6d);
            Assert.AreEqual(new Complex(2.5d, 6d), v[2]);
            v[2] = new Complex(2.5d, 7d);
            Assert.AreEqual(new Complex(2.5d, 7d), v[2]);
            v[1] = new Complex(2.5d, 8d);
            Assert.AreEqual(new Complex(2.5d, 8d), v[1]);
            v[2] = new Complex(2.5d, 9d);
            Assert.AreEqual(new Complex(2.5d, 9d), v[2]);
            v[3] = new Complex(2.5d, -1d);
            Assert.AreEqual(new Complex(2.5d, -1d), v[3]);
            v[2] = new Complex(2.5d, -2d);
            Assert.AreEqual(new Complex(2.5d, -2d), v[2]);
            v[2] = new Complex(2.5d, -3d);
            Assert.AreEqual(new Complex(2.5d, -3d), v[2]);
            v[2] = new Complex(2.5d, -4d);
            Assert.AreEqual(new Complex(2.5d, -4d), v[2]);
            v[2] = new Complex(2.5d, -5d);
            Assert.AreEqual(new Complex(2.5d, -5d), v[2]);
            v[0] = new Complex(2.5d, -6d);
            Assert.AreEqual(new Complex(2.5d, -6d), v[0]);
            v[0] = new Complex(2.5d, -7d);
            Assert.AreEqual(new Complex(2.5d, -7d), v[0]);
            v[0] = new Complex(2.5d, -8d);
            Assert.AreEqual(new Complex(2.5d, -8d), v[0]);
            v[3] = new Complex(2.5d, -9d);
            Assert.AreEqual(new Complex(2.5d, -9d), v[3]);
            v[3] = new Complex(2.5d, -9.5d);
            Assert.AreEqual(new Complex(2.5d, -9.5d), v[3]);
            v[0] = new Complex(2.5d, -8.5d);
            Assert.AreEqual(new Complex(2.5d, -8.5d), v[0]);
            v[0] = new Complex(2.5d, -7.5d);
            Assert.AreEqual(new Complex(2.5d, -7.5d), v[0]);
            v[2] = new Complex(2.5d, -6.5d);
            Assert.AreEqual(new Complex(2.5d, -6.5d), v[2]);
            v[3] = new Complex(2.5d, -5.5d);
            Assert.AreEqual(new Complex(2.5d, -5.5d), v[3]);
            v[3] = new Complex(2.5d, -4.5d);
            Assert.AreEqual(new Complex(2.5d, -4.5d), v[3]);
            v[1] = new Complex(2.5d, -3.5d);
            Assert.AreEqual(new Complex(2.5d, -3.5d), v[1]);
            v[1] = new Complex(2.5d, -2.5d);
            Assert.AreEqual(new Complex(2.5d, -2.5d), v[1]);
            v[1] = new Complex(2.5d, -1.5d);
            Assert.AreEqual(new Complex(2.5d, -1.5d), v[1]);
            v[1] = new Complex(2.5d, -0.5d);
            Assert.AreEqual(new Complex(2.5d, -0.5d), v[1]);
            v[2] = new Complex(2.5d, 0.5d);
            Assert.AreEqual(new Complex(2.5d, 0.5d), v[2]);
            v[3] = new Complex(2.5d, 1.5d);
            Assert.AreEqual(new Complex(2.5d, 1.5d), v[3]);
            v[2] = new Complex(2.5d, 2.5d);
            Assert.AreEqual(new Complex(2.5d, 2.5d), v[2]);
            v[3] = new Complex(2.5d, 3.5d);
            Assert.AreEqual(new Complex(2.5d, 3.5d), v[3]);
            v[1] = new Complex(2.5d, 4.5d);
            Assert.AreEqual(new Complex(2.5d, 4.5d), v[1]);
            v[1] = new Complex(2.5d, 5.5d);
            Assert.AreEqual(new Complex(2.5d, 5.5d), v[1]);
            v[3] = new Complex(2.5d, 6.5d);
            Assert.AreEqual(new Complex(2.5d, 6.5d), v[3]);
            v[2] = new Complex(2.5d, 7.5d);
            Assert.AreEqual(new Complex(2.5d, 7.5d), v[2]);
            v[1] = new Complex(2.5d, 8.5d);
            Assert.AreEqual(new Complex(2.5d, 8.5d), v[1]);
            v[2] = new Complex(2.5d, 9.5d);
            Assert.AreEqual(new Complex(2.5d, 9.5d), v[2]);
            v[3] = new Complex(3.5d, 0.0);
            Assert.AreEqual(new Complex(3.5d, 0.0), v[3]);
            v[2] = new Complex(3.5d, 1.0);
            Assert.AreEqual(new Complex(3.5d, 1.0), v[2]);
            v[2] = new Complex(3.5d, 2d);
            Assert.AreEqual(new Complex(3.5d, 2d), v[2]);
            v[1] = new Complex(3.5d, 3d);
            Assert.AreEqual(new Complex(3.5d, 3d), v[1]);
            v[1] = new Complex(3.5d, 4d);
            Assert.AreEqual(new Complex(3.5d, 4d), v[1]);
            v[3] = new Complex(3.5d, 5d);
            Assert.AreEqual(new Complex(3.5d, 5d), v[3]);
            v[1] = new Complex(3.5d, 6d);
            Assert.AreEqual(new Complex(3.5d, 6d), v[1]);
            v[1] = new Complex(3.5d, 7d);
            Assert.AreEqual(new Complex(3.5d, 7d), v[1]);
            v[3] = new Complex(3.5d, 8d);
            Assert.AreEqual(new Complex(3.5d, 8d), v[3]);
            v[1] = new Complex(3.5d, 9d);
            Assert.AreEqual(new Complex(3.5d, 9d), v[1]);
            v[0] = new Complex(3.5d, -1d);
            Assert.AreEqual(new Complex(3.5d, -1d), v[0]);
            v[3] = new Complex(3.5d, -2d);
            Assert.AreEqual(new Complex(3.5d, -2d), v[3]);
            v[0] = new Complex(3.5d, -3d);
            Assert.AreEqual(new Complex(3.5d, -3d), v[0]);
            v[3] = new Complex(3.5d, -4d);
            Assert.AreEqual(new Complex(3.5d, -4d), v[3]);
            v[0] = new Complex(3.5d, -5d);
            Assert.AreEqual(new Complex(3.5d, -5d), v[0]);
            v[2] = new Complex(3.5d, -6d);
            Assert.AreEqual(new Complex(3.5d, -6d), v[2]);
            v[2] = new Complex(3.5d, -7d);
            Assert.AreEqual(new Complex(3.5d, -7d), v[2]);
            v[3] = new Complex(3.5d, -8d);
            Assert.AreEqual(new Complex(3.5d, -8d), v[3]);
            v[0] = new Complex(3.5d, -9d);
            Assert.AreEqual(new Complex(3.5d, -9d), v[0]);
            v[2] = new Complex(3.5d, -9.5d);
            Assert.AreEqual(new Complex(3.5d, -9.5d), v[2]);
            v[3] = new Complex(3.5d, -8.5d);
            Assert.AreEqual(new Complex(3.5d, -8.5d), v[3]);
            v[3] = new Complex(3.5d, -7.5d);
            Assert.AreEqual(new Complex(3.5d, -7.5d), v[3]);
            v[1] = new Complex(3.5d, -6.5d);
            Assert.AreEqual(new Complex(3.5d, -6.5d), v[1]);
            v[0] = new Complex(3.5d, -5.5d);
            Assert.AreEqual(new Complex(3.5d, -5.5d), v[0]);
            v[2] = new Complex(3.5d, -4.5d);
            Assert.AreEqual(new Complex(3.5d, -4.5d), v[2]);
            v[2] = new Complex(3.5d, -3.5d);
            Assert.AreEqual(new Complex(3.5d, -3.5d), v[2]);
            v[1] = new Complex(3.5d, -2.5d);
            Assert.AreEqual(new Complex(3.5d, -2.5d), v[1]);
            v[2] = new Complex(3.5d, -1.5d);
            Assert.AreEqual(new Complex(3.5d, -1.5d), v[2]);
            v[1] = new Complex(3.5d, -0.5d);
            Assert.AreEqual(new Complex(3.5d, -0.5d), v[1]);
            v[0] = new Complex(3.5d, 0.5d);
            Assert.AreEqual(new Complex(3.5d, 0.5d), v[0]);
            v[2] = new Complex(3.5d, 1.5d);
            Assert.AreEqual(new Complex(3.5d, 1.5d), v[2]);
            v[1] = new Complex(3.5d, 2.5d);
            Assert.AreEqual(new Complex(3.5d, 2.5d), v[1]);
            v[3] = new Complex(3.5d, 3.5d);
            Assert.AreEqual(new Complex(3.5d, 3.5d), v[3]);
            v[2] = new Complex(3.5d, 4.5d);
            Assert.AreEqual(new Complex(3.5d, 4.5d), v[2]);
            v[3] = new Complex(3.5d, 5.5d);
            Assert.AreEqual(new Complex(3.5d, 5.5d), v[3]);
            v[0] = new Complex(3.5d, 6.5d);
            Assert.AreEqual(new Complex(3.5d, 6.5d), v[0]);
            v[1] = new Complex(3.5d, 7.5d);
            Assert.AreEqual(new Complex(3.5d, 7.5d), v[1]);
            v[3] = new Complex(3.5d, 8.5d);
            Assert.AreEqual(new Complex(3.5d, 8.5d), v[3]);
            v[1] = new Complex(3.5d, 9.5d);
            Assert.AreEqual(new Complex(3.5d, 9.5d), v[1]);
            v[0] = new Complex(4.5d, 0.0);
            Assert.AreEqual(new Complex(4.5d, 0.0), v[0]);
            v[1] = new Complex(4.5d, 1.0);
            Assert.AreEqual(new Complex(4.5d, 1.0), v[1]);
            v[3] = new Complex(4.5d, 2d);
            Assert.AreEqual(new Complex(4.5d, 2d), v[3]);
            v[1] = new Complex(4.5d, 3d);
            Assert.AreEqual(new Complex(4.5d, 3d), v[1]);
            v[3] = new Complex(4.5d, 4d);
            Assert.AreEqual(new Complex(4.5d, 4d), v[3]);
            v[1] = new Complex(4.5d, 5d);
            Assert.AreEqual(new Complex(4.5d, 5d), v[1]);
            v[2] = new Complex(4.5d, 6d);
            Assert.AreEqual(new Complex(4.5d, 6d), v[2]);
            v[3] = new Complex(4.5d, 7d);
            Assert.AreEqual(new Complex(4.5d, 7d), v[3]);
            v[2] = new Complex(4.5d, 8d);
            Assert.AreEqual(new Complex(4.5d, 8d), v[2]);
            v[3] = new Complex(4.5d, 9d);
            Assert.AreEqual(new Complex(4.5d, 9d), v[3]);
            v[2] = new Complex(4.5d, -1d);
            Assert.AreEqual(new Complex(4.5d, -1d), v[2]);
            v[3] = new Complex(4.5d, -2d);
            Assert.AreEqual(new Complex(4.5d, -2d), v[3]);
            v[0] = new Complex(4.5d, -3d);
            Assert.AreEqual(new Complex(4.5d, -3d), v[0]);
            v[2] = new Complex(4.5d, -4d);
            Assert.AreEqual(new Complex(4.5d, -4d), v[2]);
            v[2] = new Complex(4.5d, -5d);
            Assert.AreEqual(new Complex(4.5d, -5d), v[2]);
            v[3] = new Complex(4.5d, -6d);
            Assert.AreEqual(new Complex(4.5d, -6d), v[3]);
            v[3] = new Complex(4.5d, -7d);
            Assert.AreEqual(new Complex(4.5d, -7d), v[3]);
            v[0] = new Complex(4.5d, -8d);
            Assert.AreEqual(new Complex(4.5d, -8d), v[0]);
            v[2] = new Complex(4.5d, -9d);
            Assert.AreEqual(new Complex(4.5d, -9d), v[2]);
            v[2] = new Complex(4.5d, -9.5d);
            Assert.AreEqual(new Complex(4.5d, -9.5d), v[2]);
            v[2] = new Complex(4.5d, -8.5d);
            Assert.AreEqual(new Complex(4.5d, -8.5d), v[2]);
            v[1] = new Complex(4.5d, -7.5d);
            Assert.AreEqual(new Complex(4.5d, -7.5d), v[1]);
            v[2] = new Complex(4.5d, -6.5d);
            Assert.AreEqual(new Complex(4.5d, -6.5d), v[2]);
            v[3] = new Complex(4.5d, -5.5d);
            Assert.AreEqual(new Complex(4.5d, -5.5d), v[3]);
            v[3] = new Complex(4.5d, -4.5d);
            Assert.AreEqual(new Complex(4.5d, -4.5d), v[3]);
            v[2] = new Complex(4.5d, -3.5d);
            Assert.AreEqual(new Complex(4.5d, -3.5d), v[2]);
            v[2] = new Complex(4.5d, -2.5d);
            Assert.AreEqual(new Complex(4.5d, -2.5d), v[2]);
            v[0] = new Complex(4.5d, -1.5d);
            Assert.AreEqual(new Complex(4.5d, -1.5d), v[0]);
            v[2] = new Complex(4.5d, -0.5d);
            Assert.AreEqual(new Complex(4.5d, -0.5d), v[2]);
            v[3] = new Complex(4.5d, 0.5d);
            Assert.AreEqual(new Complex(4.5d, 0.5d), v[3]);
            v[0] = new Complex(4.5d, 1.5d);
            Assert.AreEqual(new Complex(4.5d, 1.5d), v[0]);
            v[0] = new Complex(4.5d, 2.5d);
            Assert.AreEqual(new Complex(4.5d, 2.5d), v[0]);
            v[2] = new Complex(4.5d, 3.5d);
            Assert.AreEqual(new Complex(4.5d, 3.5d), v[2]);
            v[1] = new Complex(4.5d, 4.5d);
            Assert.AreEqual(new Complex(4.5d, 4.5d), v[1]);
            v[0] = new Complex(4.5d, 5.5d);
            Assert.AreEqual(new Complex(4.5d, 5.5d), v[0]);
            v[0] = new Complex(4.5d, 6.5d);
            Assert.AreEqual(new Complex(4.5d, 6.5d), v[0]);
            v[3] = new Complex(4.5d, 7.5d);
            Assert.AreEqual(new Complex(4.5d, 7.5d), v[3]);
            v[2] = new Complex(4.5d, 8.5d);
            Assert.AreEqual(new Complex(4.5d, 8.5d), v[2]);
            v[2] = new Complex(4.5d, 9.5d);
            Assert.AreEqual(new Complex(4.5d, 9.5d), v[2]);
            v[2] = new Complex(5.5d, 0.0);
            Assert.AreEqual(new Complex(5.5d, 0.0), v[2]);
            v[0] = new Complex(5.5d, 1.0);
            Assert.AreEqual(new Complex(5.5d, 1.0), v[0]);
            v[3] = new Complex(5.5d, 2d);
            Assert.AreEqual(new Complex(5.5d, 2d), v[3]);
            v[2] = new Complex(5.5d, 3d);
            Assert.AreEqual(new Complex(5.5d, 3d), v[2]);
            v[3] = new Complex(5.5d, 4d);
            Assert.AreEqual(new Complex(5.5d, 4d), v[3]);
            v[3] = new Complex(5.5d, 5d);
            Assert.AreEqual(new Complex(5.5d, 5d), v[3]);
            v[1] = new Complex(5.5d, 6d);
            Assert.AreEqual(new Complex(5.5d, 6d), v[1]);
            v[2] = new Complex(5.5d, 7d);
            Assert.AreEqual(new Complex(5.5d, 7d), v[2]);
            v[3] = new Complex(5.5d, 8d);
            Assert.AreEqual(new Complex(5.5d, 8d), v[3]);
            v[0] = new Complex(5.5d, 9d);
            Assert.AreEqual(new Complex(5.5d, 9d), v[0]);
            v[2] = new Complex(5.5d, -1d);
            Assert.AreEqual(new Complex(5.5d, -1d), v[2]);
            v[0] = new Complex(5.5d, -2d);
            Assert.AreEqual(new Complex(5.5d, -2d), v[0]);
            v[3] = new Complex(5.5d, -3d);
            Assert.AreEqual(new Complex(5.5d, -3d), v[3]);
            v[3] = new Complex(5.5d, -4d);
            Assert.AreEqual(new Complex(5.5d, -4d), v[3]);
            v[1] = new Complex(5.5d, -5d);
            Assert.AreEqual(new Complex(5.5d, -5d), v[1]);
            v[2] = new Complex(5.5d, -6d);
            Assert.AreEqual(new Complex(5.5d, -6d), v[2]);
            v[2] = new Complex(5.5d, -7d);
            Assert.AreEqual(new Complex(5.5d, -7d), v[2]);
            v[2] = new Complex(5.5d, -8d);
            Assert.AreEqual(new Complex(5.5d, -8d), v[2]);
            v[0] = new Complex(5.5d, -9d);
            Assert.AreEqual(new Complex(5.5d, -9d), v[0]);
            v[1] = new Complex(5.5d, -9.5d);
            Assert.AreEqual(new Complex(5.5d, -9.5d), v[1]);
            v[1] = new Complex(5.5d, -8.5d);
            Assert.AreEqual(new Complex(5.5d, -8.5d), v[1]);
            v[2] = new Complex(5.5d, -7.5d);
            Assert.AreEqual(new Complex(5.5d, -7.5d), v[2]);
            v[2] = new Complex(5.5d, -6.5d);
            Assert.AreEqual(new Complex(5.5d, -6.5d), v[2]);
            v[1] = new Complex(5.5d, -5.5d);
            Assert.AreEqual(new Complex(5.5d, -5.5d), v[1]);
            v[3] = new Complex(5.5d, -4.5d);
            Assert.AreEqual(new Complex(5.5d, -4.5d), v[3]);
            v[3] = new Complex(5.5d, -3.5d);
            Assert.AreEqual(new Complex(5.5d, -3.5d), v[3]);
            v[1] = new Complex(5.5d, -2.5d);
            Assert.AreEqual(new Complex(5.5d, -2.5d), v[1]);
            v[0] = new Complex(5.5d, -1.5d);
            Assert.AreEqual(new Complex(5.5d, -1.5d), v[0]);
            v[2] = new Complex(5.5d, -0.5d);
            Assert.AreEqual(new Complex(5.5d, -0.5d), v[2]);
            v[1] = new Complex(5.5d, 0.5d);
            Assert.AreEqual(new Complex(5.5d, 0.5d), v[1]);
            v[1] = new Complex(5.5d, 1.5d);
            Assert.AreEqual(new Complex(5.5d, 1.5d), v[1]);
            v[0] = new Complex(5.5d, 2.5d);
            Assert.AreEqual(new Complex(5.5d, 2.5d), v[0]);
            v[1] = new Complex(5.5d, 3.5d);
            Assert.AreEqual(new Complex(5.5d, 3.5d), v[1]);
            v[2] = new Complex(5.5d, 4.5d);
            Assert.AreEqual(new Complex(5.5d, 4.5d), v[2]);
            v[3] = new Complex(5.5d, 5.5d);
            Assert.AreEqual(new Complex(5.5d, 5.5d), v[3]);
            v[1] = new Complex(5.5d, 6.5d);
            Assert.AreEqual(new Complex(5.5d, 6.5d), v[1]);
            v[3] = new Complex(5.5d, 7.5d);
            Assert.AreEqual(new Complex(5.5d, 7.5d), v[3]);
            v[3] = new Complex(5.5d, 8.5d);
            Assert.AreEqual(new Complex(5.5d, 8.5d), v[3]);
            v[3] = new Complex(5.5d, 9.5d);
            Assert.AreEqual(new Complex(5.5d, 9.5d), v[3]);
            v[0] = new Complex(6.5d, 0.0);
            Assert.AreEqual(new Complex(6.5d, 0.0), v[0]);
            v[2] = new Complex(6.5d, 1.0);
            Assert.AreEqual(new Complex(6.5d, 1.0), v[2]);
            v[3] = new Complex(6.5d, 2d);
            Assert.AreEqual(new Complex(6.5d, 2d), v[3]);
            v[3] = new Complex(6.5d, 3d);
            Assert.AreEqual(new Complex(6.5d, 3d), v[3]);
            v[3] = new Complex(6.5d, 4d);
            Assert.AreEqual(new Complex(6.5d, 4d), v[3]);
            v[3] = new Complex(6.5d, 5d);
            Assert.AreEqual(new Complex(6.5d, 5d), v[3]);
            v[3] = new Complex(6.5d, 6d);
            Assert.AreEqual(new Complex(6.5d, 6d), v[3]);
            v[0] = new Complex(6.5d, 7d);
            Assert.AreEqual(new Complex(6.5d, 7d), v[0]);
            v[1] = new Complex(6.5d, 8d);
            Assert.AreEqual(new Complex(6.5d, 8d), v[1]);
            v[1] = new Complex(6.5d, 9d);
            Assert.AreEqual(new Complex(6.5d, 9d), v[1]);
            v[3] = new Complex(6.5d, -1d);
            Assert.AreEqual(new Complex(6.5d, -1d), v[3]);
            v[2] = new Complex(6.5d, -2d);
            Assert.AreEqual(new Complex(6.5d, -2d), v[2]);
            v[1] = new Complex(6.5d, -3d);
            Assert.AreEqual(new Complex(6.5d, -3d), v[1]);
            v[3] = new Complex(6.5d, -4d);
            Assert.AreEqual(new Complex(6.5d, -4d), v[3]);
            v[0] = new Complex(6.5d, -5d);
            Assert.AreEqual(new Complex(6.5d, -5d), v[0]);
            v[0] = new Complex(6.5d, -6d);
            Assert.AreEqual(new Complex(6.5d, -6d), v[0]);
            v[0] = new Complex(6.5d, -7d);
            Assert.AreEqual(new Complex(6.5d, -7d), v[0]);
            v[2] = new Complex(6.5d, -8d);
            Assert.AreEqual(new Complex(6.5d, -8d), v[2]);
            v[1] = new Complex(6.5d, -9d);
            Assert.AreEqual(new Complex(6.5d, -9d), v[1]);
            v[3] = new Complex(6.5d, -9.5d);
            Assert.AreEqual(new Complex(6.5d, -9.5d), v[3]);
            v[3] = new Complex(6.5d, -8.5d);
            Assert.AreEqual(new Complex(6.5d, -8.5d), v[3]);
            v[2] = new Complex(6.5d, -7.5d);
            Assert.AreEqual(new Complex(6.5d, -7.5d), v[2]);
            v[0] = new Complex(6.5d, -6.5d);
            Assert.AreEqual(new Complex(6.5d, -6.5d), v[0]);
            v[3] = new Complex(6.5d, -5.5d);
            Assert.AreEqual(new Complex(6.5d, -5.5d), v[3]);
            v[1] = new Complex(6.5d, -4.5d);
            Assert.AreEqual(new Complex(6.5d, -4.5d), v[1]);
            v[3] = new Complex(6.5d, -3.5d);
            Assert.AreEqual(new Complex(6.5d, -3.5d), v[3]);
            v[2] = new Complex(6.5d, -2.5d);
            Assert.AreEqual(new Complex(6.5d, -2.5d), v[2]);
            v[2] = new Complex(6.5d, -1.5d);
            Assert.AreEqual(new Complex(6.5d, -1.5d), v[2]);
            v[0] = new Complex(6.5d, -0.5d);
            Assert.AreEqual(new Complex(6.5d, -0.5d), v[0]);
            v[0] = new Complex(6.5d, 0.5d);
            Assert.AreEqual(new Complex(6.5d, 0.5d), v[0]);
            v[3] = new Complex(6.5d, 1.5d);
            Assert.AreEqual(new Complex(6.5d, 1.5d), v[3]);
            v[2] = new Complex(6.5d, 2.5d);
            Assert.AreEqual(new Complex(6.5d, 2.5d), v[2]);
            v[2] = new Complex(6.5d, 3.5d);
            Assert.AreEqual(new Complex(6.5d, 3.5d), v[2]);
            v[3] = new Complex(6.5d, 4.5d);
            Assert.AreEqual(new Complex(6.5d, 4.5d), v[3]);
            v[3] = new Complex(6.5d, 5.5d);
            Assert.AreEqual(new Complex(6.5d, 5.5d), v[3]);
            v[3] = new Complex(6.5d, 6.5d);
            Assert.AreEqual(new Complex(6.5d, 6.5d), v[3]);
            v[1] = new Complex(6.5d, 7.5d);
            Assert.AreEqual(new Complex(6.5d, 7.5d), v[1]);
            v[3] = new Complex(6.5d, 8.5d);
            Assert.AreEqual(new Complex(6.5d, 8.5d), v[3]);
            v[2] = new Complex(6.5d, 9.5d);
            Assert.AreEqual(new Complex(6.5d, 9.5d), v[2]);
            v[1] = new Complex(7.5d, 0.0);
            Assert.AreEqual(new Complex(7.5d, 0.0), v[1]);
            v[0] = new Complex(7.5d, 1.0);
            Assert.AreEqual(new Complex(7.5d, 1.0), v[0]);
            v[2] = new Complex(7.5d, 2d);
            Assert.AreEqual(new Complex(7.5d, 2d), v[2]);
            v[3] = new Complex(7.5d, 3d);
            Assert.AreEqual(new Complex(7.5d, 3d), v[3]);
            v[2] = new Complex(7.5d, 4d);
            Assert.AreEqual(new Complex(7.5d, 4d), v[2]);
            v[3] = new Complex(7.5d, 5d);
            Assert.AreEqual(new Complex(7.5d, 5d), v[3]);
            v[3] = new Complex(7.5d, 6d);
            Assert.AreEqual(new Complex(7.5d, 6d), v[3]);
            v[0] = new Complex(7.5d, 7d);
            Assert.AreEqual(new Complex(7.5d, 7d), v[0]);
            v[0] = new Complex(7.5d, 8d);
            Assert.AreEqual(new Complex(7.5d, 8d), v[0]);
            v[1] = new Complex(7.5d, 9d);
            Assert.AreEqual(new Complex(7.5d, 9d), v[1]);
            v[2] = new Complex(7.5d, -1d);
            Assert.AreEqual(new Complex(7.5d, -1d), v[2]);
            v[3] = new Complex(7.5d, -2d);
            Assert.AreEqual(new Complex(7.5d, -2d), v[3]);
            v[3] = new Complex(7.5d, -3d);
            Assert.AreEqual(new Complex(7.5d, -3d), v[3]);
            v[1] = new Complex(7.5d, -4d);
            Assert.AreEqual(new Complex(7.5d, -4d), v[1]);
            v[0] = new Complex(7.5d, -5d);
            Assert.AreEqual(new Complex(7.5d, -5d), v[0]);
            v[3] = new Complex(7.5d, -6d);
            Assert.AreEqual(new Complex(7.5d, -6d), v[3]);
            v[2] = new Complex(7.5d, -7d);
            Assert.AreEqual(new Complex(7.5d, -7d), v[2]);
            v[1] = new Complex(7.5d, -8d);
            Assert.AreEqual(new Complex(7.5d, -8d), v[1]);
            v[0] = new Complex(7.5d, -9d);
            Assert.AreEqual(new Complex(7.5d, -9d), v[0]);
            v[2] = new Complex(7.5d, -9.5d);
            Assert.AreEqual(new Complex(7.5d, -9.5d), v[2]);
            v[0] = new Complex(7.5d, -8.5d);
            Assert.AreEqual(new Complex(7.5d, -8.5d), v[0]);
            v[1] = new Complex(7.5d, -7.5d);
            Assert.AreEqual(new Complex(7.5d, -7.5d), v[1]);
            v[0] = new Complex(7.5d, -6.5d);
            Assert.AreEqual(new Complex(7.5d, -6.5d), v[0]);
            v[3] = new Complex(7.5d, -5.5d);
            Assert.AreEqual(new Complex(7.5d, -5.5d), v[3]);
            v[1] = new Complex(7.5d, -4.5d);
            Assert.AreEqual(new Complex(7.5d, -4.5d), v[1]);
            v[2] = new Complex(7.5d, -3.5d);
            Assert.AreEqual(new Complex(7.5d, -3.5d), v[2]);
            v[0] = new Complex(7.5d, -2.5d);
            Assert.AreEqual(new Complex(7.5d, -2.5d), v[0]);
            v[3] = new Complex(7.5d, -1.5d);
            Assert.AreEqual(new Complex(7.5d, -1.5d), v[3]);
            v[2] = new Complex(7.5d, -0.5d);
            Assert.AreEqual(new Complex(7.5d, -0.5d), v[2]);
            v[3] = new Complex(7.5d, 0.5d);
            Assert.AreEqual(new Complex(7.5d, 0.5d), v[3]);
            v[0] = new Complex(7.5d, 1.5d);
            Assert.AreEqual(new Complex(7.5d, 1.5d), v[0]);
            v[2] = new Complex(7.5d, 2.5d);
            Assert.AreEqual(new Complex(7.5d, 2.5d), v[2]);
            v[0] = new Complex(7.5d, 3.5d);
            Assert.AreEqual(new Complex(7.5d, 3.5d), v[0]);
            v[3] = new Complex(7.5d, 4.5d);
            Assert.AreEqual(new Complex(7.5d, 4.5d), v[3]);
            v[0] = new Complex(7.5d, 5.5d);
            Assert.AreEqual(new Complex(7.5d, 5.5d), v[0]);
            v[2] = new Complex(7.5d, 6.5d);
            Assert.AreEqual(new Complex(7.5d, 6.5d), v[2]);
            v[1] = new Complex(7.5d, 7.5d);
            Assert.AreEqual(new Complex(7.5d, 7.5d), v[1]);
            v[2] = new Complex(7.5d, 8.5d);
            Assert.AreEqual(new Complex(7.5d, 8.5d), v[2]);
            v[1] = new Complex(7.5d, 9.5d);
            Assert.AreEqual(new Complex(7.5d, 9.5d), v[1]);
            v[0] = new Complex(8.5d, 0.0);
            Assert.AreEqual(new Complex(8.5d, 0.0), v[0]);
            v[1] = new Complex(8.5d, 1.0);
            Assert.AreEqual(new Complex(8.5d, 1.0), v[1]);
            v[2] = new Complex(8.5d, 2d);
            Assert.AreEqual(new Complex(8.5d, 2d), v[2]);
            v[1] = new Complex(8.5d, 3d);
            Assert.AreEqual(new Complex(8.5d, 3d), v[1]);
            v[1] = new Complex(8.5d, 4d);
            Assert.AreEqual(new Complex(8.5d, 4d), v[1]);
            v[2] = new Complex(8.5d, 5d);
            Assert.AreEqual(new Complex(8.5d, 5d), v[2]);
            v[0] = new Complex(8.5d, 6d);
            Assert.AreEqual(new Complex(8.5d, 6d), v[0]);
            v[0] = new Complex(8.5d, 7d);
            Assert.AreEqual(new Complex(8.5d, 7d), v[0]);
            v[0] = new Complex(8.5d, 8d);
            Assert.AreEqual(new Complex(8.5d, 8d), v[0]);
            v[2] = new Complex(8.5d, 9d);
            Assert.AreEqual(new Complex(8.5d, 9d), v[2]);
            v[3] = new Complex(8.5d, -1d);
            Assert.AreEqual(new Complex(8.5d, -1d), v[3]);
            v[1] = new Complex(8.5d, -2d);
            Assert.AreEqual(new Complex(8.5d, -2d), v[1]);
            v[1] = new Complex(8.5d, -3d);
            Assert.AreEqual(new Complex(8.5d, -3d), v[1]);
            v[1] = new Complex(8.5d, -4d);
            Assert.AreEqual(new Complex(8.5d, -4d), v[1]);
            v[1] = new Complex(8.5d, -5d);
            Assert.AreEqual(new Complex(8.5d, -5d), v[1]);
            v[2] = new Complex(8.5d, -6d);
            Assert.AreEqual(new Complex(8.5d, -6d), v[2]);
            v[0] = new Complex(8.5d, -7d);
            Assert.AreEqual(new Complex(8.5d, -7d), v[0]);
            v[3] = new Complex(8.5d, -8d);
            Assert.AreEqual(new Complex(8.5d, -8d), v[3]);
            v[2] = new Complex(8.5d, -9d);
            Assert.AreEqual(new Complex(8.5d, -9d), v[2]);
            v[2] = new Complex(8.5d, -9.5d);
            Assert.AreEqual(new Complex(8.5d, -9.5d), v[2]);
            v[0] = new Complex(8.5d, -8.5d);
            Assert.AreEqual(new Complex(8.5d, -8.5d), v[0]);
            v[2] = new Complex(8.5d, -7.5d);
            Assert.AreEqual(new Complex(8.5d, -7.5d), v[2]);
            v[0] = new Complex(8.5d, -6.5d);
            Assert.AreEqual(new Complex(8.5d, -6.5d), v[0]);
            v[1] = new Complex(8.5d, -5.5d);
            Assert.AreEqual(new Complex(8.5d, -5.5d), v[1]);
            v[1] = new Complex(8.5d, -4.5d);
            Assert.AreEqual(new Complex(8.5d, -4.5d), v[1]);
            v[0] = new Complex(8.5d, -3.5d);
            Assert.AreEqual(new Complex(8.5d, -3.5d), v[0]);
            v[3] = new Complex(8.5d, -2.5d);
            Assert.AreEqual(new Complex(8.5d, -2.5d), v[3]);
            v[2] = new Complex(8.5d, -1.5d);
            Assert.AreEqual(new Complex(8.5d, -1.5d), v[2]);
            v[3] = new Complex(8.5d, -0.5d);
            Assert.AreEqual(new Complex(8.5d, -0.5d), v[3]);
            v[1] = new Complex(8.5d, 0.5d);
            Assert.AreEqual(new Complex(8.5d, 0.5d), v[1]);
            v[1] = new Complex(8.5d, 1.5d);
            Assert.AreEqual(new Complex(8.5d, 1.5d), v[1]);
            v[2] = new Complex(8.5d, 2.5d);
            Assert.AreEqual(new Complex(8.5d, 2.5d), v[2]);
            v[0] = new Complex(8.5d, 3.5d);
            Assert.AreEqual(new Complex(8.5d, 3.5d), v[0]);
            v[3] = new Complex(8.5d, 4.5d);
            Assert.AreEqual(new Complex(8.5d, 4.5d), v[3]);
            v[0] = new Complex(8.5d, 5.5d);
            Assert.AreEqual(new Complex(8.5d, 5.5d), v[0]);
            v[0] = new Complex(8.5d, 6.5d);
            Assert.AreEqual(new Complex(8.5d, 6.5d), v[0]);
            v[1] = new Complex(8.5d, 7.5d);
            Assert.AreEqual(new Complex(8.5d, 7.5d), v[1]);
            v[3] = new Complex(8.5d, 8.5d);
            Assert.AreEqual(new Complex(8.5d, 8.5d), v[3]);
            v[3] = new Complex(8.5d, 9.5d);
            Assert.AreEqual(new Complex(8.5d, 9.5d), v[3]);
            v[1] = new Complex(9.5d, 0.0);
            Assert.AreEqual(new Complex(9.5d, 0.0), v[1]);
            v[0] = new Complex(9.5d, 1.0);
            Assert.AreEqual(new Complex(9.5d, 1.0), v[0]);
            v[1] = new Complex(9.5d, 2d);
            Assert.AreEqual(new Complex(9.5d, 2d), v[1]);
            v[0] = new Complex(9.5d, 3d);
            Assert.AreEqual(new Complex(9.5d, 3d), v[0]);
            v[1] = new Complex(9.5d, 4d);
            Assert.AreEqual(new Complex(9.5d, 4d), v[1]);
            v[2] = new Complex(9.5d, 5d);
            Assert.AreEqual(new Complex(9.5d, 5d), v[2]);
            v[2] = new Complex(9.5d, 6d);
            Assert.AreEqual(new Complex(9.5d, 6d), v[2]);
            v[2] = new Complex(9.5d, 7d);
            Assert.AreEqual(new Complex(9.5d, 7d), v[2]);
            v[1] = new Complex(9.5d, 8d);
            Assert.AreEqual(new Complex(9.5d, 8d), v[1]);
            v[3] = new Complex(9.5d, 9d);
            Assert.AreEqual(new Complex(9.5d, 9d), v[3]);
            v[1] = new Complex(9.5d, -1d);
            Assert.AreEqual(new Complex(9.5d, -1d), v[1]);
            v[0] = new Complex(9.5d, -2d);
            Assert.AreEqual(new Complex(9.5d, -2d), v[0]);
            v[3] = new Complex(9.5d, -3d);
            Assert.AreEqual(new Complex(9.5d, -3d), v[3]);
            v[2] = new Complex(9.5d, -4d);
            Assert.AreEqual(new Complex(9.5d, -4d), v[2]);
            v[3] = new Complex(9.5d, -5d);
            Assert.AreEqual(new Complex(9.5d, -5d), v[3]);
            v[0] = new Complex(9.5d, -6d);
            Assert.AreEqual(new Complex(9.5d, -6d), v[0]);
            v[1] = new Complex(9.5d, -7d);
            Assert.AreEqual(new Complex(9.5d, -7d), v[1]);
            v[1] = new Complex(9.5d, -8d);
            Assert.AreEqual(new Complex(9.5d, -8d), v[1]);
            v[1] = new Complex(9.5d, -9d);
            Assert.AreEqual(new Complex(9.5d, -9d), v[1]);
            v[0] = new Complex(9.5d, -9.5d);
            Assert.AreEqual(new Complex(9.5d, -9.5d), v[0]);
            v[0] = new Complex(9.5d, -8.5d);
            Assert.AreEqual(new Complex(9.5d, -8.5d), v[0]);
            v[3] = new Complex(9.5d, -7.5d);
            Assert.AreEqual(new Complex(9.5d, -7.5d), v[3]);
            v[1] = new Complex(9.5d, -6.5d);
            Assert.AreEqual(new Complex(9.5d, -6.5d), v[1]);
            v[0] = new Complex(9.5d, -5.5d);
            Assert.AreEqual(new Complex(9.5d, -5.5d), v[0]);
            v[3] = new Complex(9.5d, -4.5d);
            Assert.AreEqual(new Complex(9.5d, -4.5d), v[3]);
            v[0] = new Complex(9.5d, -3.5d);
            Assert.AreEqual(new Complex(9.5d, -3.5d), v[0]);
            v[1] = new Complex(9.5d, -2.5d);
            Assert.AreEqual(new Complex(9.5d, -2.5d), v[1]);
            v[1] = new Complex(9.5d, -1.5d);
            Assert.AreEqual(new Complex(9.5d, -1.5d), v[1]);
            v[1] = new Complex(9.5d, -0.5d);
            Assert.AreEqual(new Complex(9.5d, -0.5d), v[1]);
            v[1] = new Complex(9.5d, 0.5d);
            Assert.AreEqual(new Complex(9.5d, 0.5d), v[1]);
            v[0] = new Complex(9.5d, 1.5d);
            Assert.AreEqual(new Complex(9.5d, 1.5d), v[0]);
            v[0] = new Complex(9.5d, 2.5d);
            Assert.AreEqual(new Complex(9.5d, 2.5d), v[0]);
            v[0] = new Complex(9.5d, 3.5d);
            Assert.AreEqual(new Complex(9.5d, 3.5d), v[0]);
            v[0] = new Complex(9.5d, 4.5d);
            Assert.AreEqual(new Complex(9.5d, 4.5d), v[0]);
            v[1] = new Complex(9.5d, 5.5d);
            Assert.AreEqual(new Complex(9.5d, 5.5d), v[1]);
            v[1] = new Complex(9.5d, 6.5d);
            Assert.AreEqual(new Complex(9.5d, 6.5d), v[1]);
            v[2] = new Complex(9.5d, 7.5d);
            Assert.AreEqual(new Complex(9.5d, 7.5d), v[2]);
            v[2] = new Complex(9.5d, 8.5d);
            Assert.AreEqual(new Complex(9.5d, 8.5d), v[2]);
            v[2] = new Complex(9.5d, 9.5d);
            Assert.AreEqual(new Complex(9.5d, 9.5d), v[2]);
        }

        [Test]
        public void PropertyValues()
        {
            var v = new cvec4(new Complex(-9d, -8d), new Complex(4.5d, -5.5d), new Complex(8.5d, -5.5d), new Complex(-1d, -3d));
            var vals = v.Values;
            Assert.AreEqual(new Complex(-9d, -8d), vals[0]);
            Assert.AreEqual(new Complex(4.5d, -5.5d), vals[1]);
            Assert.AreEqual(new Complex(8.5d, -5.5d), vals[2]);
            Assert.AreEqual(new Complex(-1d, -3d), vals[3]);
            Assert.That(vals.SequenceEqual(v.ToArray()));
        }

        [Test]
        public void StaticProperties()
        {
            Assert.AreEqual(Complex.Zero, cvec4.Zero.x);
            Assert.AreEqual(Complex.Zero, cvec4.Zero.y);
            Assert.AreEqual(Complex.Zero, cvec4.Zero.z);
            Assert.AreEqual(Complex.Zero, cvec4.Zero.w);
            
            Assert.AreEqual(Complex.One, cvec4.Ones.x);
            Assert.AreEqual(Complex.One, cvec4.Ones.y);
            Assert.AreEqual(Complex.One, cvec4.Ones.z);
            Assert.AreEqual(Complex.One, cvec4.Ones.w);
            
            Assert.AreEqual(Complex.One, cvec4.UnitX.x);
            Assert.AreEqual(Complex.Zero, cvec4.UnitX.y);
            Assert.AreEqual(Complex.Zero, cvec4.UnitX.z);
            Assert.AreEqual(Complex.Zero, cvec4.UnitX.w);
            
            Assert.AreEqual(Complex.Zero, cvec4.UnitY.x);
            Assert.AreEqual(Complex.One, cvec4.UnitY.y);
            Assert.AreEqual(Complex.Zero, cvec4.UnitY.z);
            Assert.AreEqual(Complex.Zero, cvec4.UnitY.w);
            
            Assert.AreEqual(Complex.Zero, cvec4.UnitZ.x);
            Assert.AreEqual(Complex.Zero, cvec4.UnitZ.y);
            Assert.AreEqual(Complex.One, cvec4.UnitZ.z);
            Assert.AreEqual(Complex.Zero, cvec4.UnitZ.w);
            
            Assert.AreEqual(Complex.Zero, cvec4.UnitW.x);
            Assert.AreEqual(Complex.Zero, cvec4.UnitW.y);
            Assert.AreEqual(Complex.Zero, cvec4.UnitW.z);
            Assert.AreEqual(Complex.One, cvec4.UnitW.w);
        }

        [Test]
        public void Operators()
        {
            var v1 = new cvec4(new Complex(-8d, -8d), new Complex(8.5d, 3d), new Complex(-6.5d, -2.5d), new Complex(2.5d, 9.5d));
            var v2 = new cvec4(new Complex(-8d, -8d), new Complex(8.5d, 3d), new Complex(-6.5d, -2.5d), new Complex(2.5d, 9.5d));
            var v3 = new cvec4(new Complex(2.5d, 9.5d), new Complex(-6.5d, -2.5d), new Complex(8.5d, 3d), new Complex(-8d, -8d));
            Assert.That(v1 == new cvec4(v1));
            Assert.That(v2 == new cvec4(v2));
            Assert.That(v3 == new cvec4(v3));
            Assert.That(v1 == v2);
            Assert.That(v1 != v3);
            Assert.That(v2 != v3);
        }

        [Test]
        public void StringInterop()
        {
            var v = new cvec4(new Complex(5d, 1.0), new Complex(8d, -8.5d), new Complex(-9.5d, 2d), new Complex(5.5d, 0.0));
            
            var s0 = v.ToString();
            var s1 = v.ToString("#");
            
            var s2 = v.ToString(";", CultureInfo.InvariantCulture);
            Assert.That(s2.Length > 0);
        }

        [Test]
        public void InvariantId()
        {
            {
                var v0 = new cvec4(new Complex(2d, 5d), new Complex(-8.5d, 0.5d), new Complex(-2.5d, -5d), new Complex(5d, -7d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(2.5d, 5.5d), new Complex(-0.5d, 3d), new Complex(5d, 7.5d), new Complex(-7.5d, -7d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(-0.5d, 6.5d), new Complex(-1d, -2.5d), new Complex(-8d, 0.0), new Complex(1.5d, 2.5d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(7.5d, 0.5d), new Complex(1.0, -9.5d), new Complex(4.5d, -4d), new Complex(4d, -7.5d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(-7.5d, 1.0), new Complex(8d, 5d), new Complex(7d, -2.5d), new Complex(3d, 3d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(-7.5d, 3.5d), new Complex(-8.5d, -7d), new Complex(-0.5d, -7.5d), new Complex(5d, 9d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(-2.5d, 3d), new Complex(5d, 8d), new Complex(8.5d, -9.5d), new Complex(3.5d, 3.5d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(1.5d, 3d), new Complex(1.5d, 1.0), new Complex(2d, 2.5d), new Complex(2d, -3.5d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(0.0, -1.5d), new Complex(3.5d, 5d), new Complex(-4d, 0.0), new Complex(-9.5d, -1d));
                Assert.AreEqual(v0, +v0);
            }
            {
                var v0 = new cvec4(new Complex(-8.5d, -3d), new Complex(-9.5d, -9d), new Complex(-7d, -7d), new Complex(-1.5d, 6d));
                Assert.AreEqual(v0, +v0);
            }
        }

        [Test]
        public void InvariantDouble()
        {
            {
                var v0 = new cvec4(new Complex(1.5d, -6.5d), new Complex(6d, 9.5d), new Complex(-4d, 5d), new Complex(-7d, -6d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(0.5d, 3d), new Complex(8d, 0.5d), new Complex(3d, 1.5d), new Complex(-9.5d, -9.5d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-6.5d, 6.5d), new Complex(-2.5d, 6.5d), new Complex(-7d, 5d), new Complex(4d, 2.5d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(0.5d, -6.5d), new Complex(9d, 4.5d), new Complex(-1.5d, 0.5d), new Complex(-2.5d, 7d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(7d, -7.5d), new Complex(-1d, -0.5d), new Complex(7d, -4d), new Complex(7.5d, 1.0));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-2.5d, 1.0), new Complex(8d, -4.5d), new Complex(-3.5d, -1d), new Complex(-1d, -6d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(2d, 6.5d), new Complex(-0.5d, -9.5d), new Complex(-8.5d, -9.5d), new Complex(1.0, 4.5d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(7.5d, 1.5d), new Complex(4d, 0.5d), new Complex(5.5d, 6.5d), new Complex(5.5d, 5d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-8d, 2.5d), new Complex(8.5d, -3d), new Complex(2d, -7d), new Complex(0.5d, -5d));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-6d, -4d), new Complex(1.5d, -7d), new Complex(-2.5d, -7.5d), new Complex(2.5d, 1.0));
                Assert.AreEqual(v0 + v0, 2 * v0);
            }
        }

        [Test]
        public void InvariantTriple()
        {
            {
                var v0 = new cvec4(new Complex(6d, 6.5d), new Complex(7d, 4.5d), new Complex(4.5d, -8.5d), new Complex(6.5d, 2d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-5d, 0.0), new Complex(7d, 5d), new Complex(-3d, -9d), new Complex(9.5d, -1.5d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(6.5d, -2.5d), new Complex(6d, -3.5d), new Complex(-4d, 4.5d), new Complex(8.5d, -2d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(9.5d, -4.5d), new Complex(-5.5d, -1.5d), new Complex(-4.5d, 9.5d), new Complex(2.5d, -6.5d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(9d, 0.0), new Complex(6d, 4.5d), new Complex(9d, -6.5d), new Complex(-8.5d, -6.5d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(6d, 1.0), new Complex(-2.5d, -2.5d), new Complex(0.5d, 1.5d), new Complex(4d, -4d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(4d, 9.5d), new Complex(-2.5d, -1.5d), new Complex(1.5d, -6d), new Complex(-9d, 9d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(2d, 8d), new Complex(4d, 5.5d), new Complex(-8d, 8d), new Complex(4d, 1.0));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(3d, 8d), new Complex(6.5d, -9.5d), new Complex(8.5d, -7d), new Complex(-0.5d, -2d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
            {
                var v0 = new cvec4(new Complex(0.0, 1.0), new Complex(-3.5d, -2d), new Complex(1.0, -6d), new Complex(9d, -8.5d));
                Assert.AreEqual(v0 + v0 + v0, 3 * v0);
            }
        }

        [Test]
        public void InvariantCommutative()
        {
            {
                var v0 = new cvec4(new Complex(9.5d, 8.5d), new Complex(2d, 1.5d), new Complex(7.5d, -9d), new Complex(7.5d, 8d));
                var v1 = new cvec4(new Complex(-1d, -4.5d), new Complex(8.5d, -2d), new Complex(-9d, -4d), new Complex(0.5d, 4.5d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(8.5d, 6d), new Complex(6.5d, 1.0), new Complex(-8.5d, -5d), new Complex(7d, 7.5d));
                var v1 = new cvec4(new Complex(0.5d, 6d), new Complex(-7d, -5.5d), new Complex(-1.5d, 5.5d), new Complex(-2d, -9.5d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-4d, 5.5d), new Complex(2.5d, -2.5d), new Complex(1.5d, -5d), new Complex(-9.5d, 2.5d));
                var v1 = new cvec4(new Complex(-8.5d, 6d), new Complex(-9.5d, 0.5d), new Complex(1.5d, 3d), new Complex(8.5d, 6d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-8.5d, -5d), new Complex(6d, 9d), new Complex(-5d, 8.5d), new Complex(7.5d, -4.5d));
                var v1 = new cvec4(new Complex(-9.5d, -2d), new Complex(5.5d, -3d), new Complex(9d, 0.5d), new Complex(-4d, 6.5d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(3d, 9.5d), new Complex(0.5d, 8.5d), new Complex(9.5d, -5d), new Complex(-3d, 1.0));
                var v1 = new cvec4(new Complex(-4d, -5.5d), new Complex(5.5d, -5.5d), new Complex(-6.5d, -9d), new Complex(0.5d, 4d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-6.5d, 2.5d), new Complex(-8.5d, 3.5d), new Complex(-2.5d, 1.0), new Complex(1.0, 2d));
                var v1 = new cvec4(new Complex(-5d, -7d), new Complex(5d, -7.5d), new Complex(0.0, 8d), new Complex(5.5d, -4d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-7.5d, 3d), new Complex(-8d, -4.5d), new Complex(4.5d, 7.5d), new Complex(-8.5d, -6.5d));
                var v1 = new cvec4(new Complex(-1d, -8d), new Complex(-5.5d, 6d), new Complex(4.5d, -5d), new Complex(-9.5d, 5d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-2d, -1.5d), new Complex(9.5d, -3d), new Complex(-6d, 1.5d), new Complex(4d, -3d));
                var v1 = new cvec4(new Complex(-6.5d, -1d), new Complex(-8.5d, -0.5d), new Complex(-1d, -8.5d), new Complex(2d, 2.5d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(-3.5d, 8d), new Complex(6d, -7d), new Complex(3d, 6.5d), new Complex(9.5d, 8d));
                var v1 = new cvec4(new Complex(-8d, 9d), new Complex(-6d, 2.5d), new Complex(7.5d, 5.5d), new Complex(-9d, -1d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
            {
                var v0 = new cvec4(new Complex(9d, 5d), new Complex(1.0, 7d), new Complex(6.5d, 9.5d), new Complex(9.5d, -4d));
                var v1 = new cvec4(new Complex(3.5d, -0.5d), new Complex(-0.5d, 8.5d), new Complex(-6.5d, -2.5d), new Complex(-5d, 0.5d));
                Assert.AreEqual(v0 * v1, v1 * v0);
            }
        }

        [Test]
        public void InvariantAssociative()
        {
            {
                var v0 = new cvec4(new Complex(9.5d, -2.5d), new Complex(-9.5d, 2.5d), new Complex(8d, 1.0), new Complex(-4.5d, 1.0));
                var v1 = new cvec4(new Complex(1.0, 5.5d), new Complex(-5.5d, 6.5d), new Complex(-8.5d, 6.5d), new Complex(1.5d, 6d));
                var v2 = new cvec4(new Complex(8.5d, 5d), new Complex(9d, 0.5d), new Complex(3.5d, -6d), new Complex(3.5d, -5.5d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(3.5d, 9d), new Complex(-2d, 4d), new Complex(4.5d, 0.5d), new Complex(4d, -9d));
                var v1 = new cvec4(new Complex(-5d, -7.5d), new Complex(9d, -1d), new Complex(5d, 0.5d), new Complex(-9.5d, -7d));
                var v2 = new cvec4(new Complex(-3.5d, 1.0), new Complex(5.5d, 4d), new Complex(5.5d, 6.5d), new Complex(1.0, -0.5d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-6d, -9d), new Complex(-8d, 9.5d), new Complex(-8d, 5d), new Complex(-0.5d, -8.5d));
                var v1 = new cvec4(new Complex(-3.5d, -6.5d), new Complex(2.5d, 6.5d), new Complex(-9.5d, 9d), new Complex(-7d, 9d));
                var v2 = new cvec4(new Complex(-4d, 8d), new Complex(-7d, -5.5d), new Complex(4.5d, 0.5d), new Complex(4d, 2.5d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-1.5d, 8d), new Complex(-0.5d, -6d), new Complex(-7.5d, -5.5d), new Complex(8d, 2d));
                var v1 = new cvec4(new Complex(6.5d, 3d), new Complex(-5d, 9d), new Complex(-0.5d, 2d), new Complex(-9.5d, 8.5d));
                var v2 = new cvec4(new Complex(-8.5d, -8.5d), new Complex(-2d, 9.5d), new Complex(9d, -7d), new Complex(-5.5d, -3.5d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-3.5d, -9d), new Complex(-6d, 4d), new Complex(-0.5d, -5.5d), new Complex(-2d, 8.5d));
                var v1 = new cvec4(new Complex(5.5d, -3d), new Complex(3d, 3.5d), new Complex(-4d, 6.5d), new Complex(4d, -9.5d));
                var v2 = new cvec4(new Complex(-5.5d, 6.5d), new Complex(6d, -1d), new Complex(8d, -9.5d), new Complex(-6.5d, 6.5d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(6d, -1.5d), new Complex(2.5d, -5d), new Complex(4d, -7.5d), new Complex(5d, 6d));
                var v1 = new cvec4(new Complex(0.5d, -8.5d), new Complex(-7d, 3d), new Complex(-9.5d, -4d), new Complex(-6d, -5.5d));
                var v2 = new cvec4(new Complex(-7d, -5d), new Complex(-0.5d, 5.5d), new Complex(-7d, 9d), new Complex(-3.5d, 6d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-2.5d, -3.5d), new Complex(7.5d, -1.5d), new Complex(-5.5d, -4d), new Complex(-1d, -0.5d));
                var v1 = new cvec4(new Complex(6d, 0.0), new Complex(-5d, 5.5d), new Complex(-8.5d, 7d), new Complex(3d, -8d));
                var v2 = new cvec4(new Complex(8d, -9.5d), new Complex(3.5d, -9d), new Complex(3d, 0.0), new Complex(-1d, -6d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(3d, -1d), new Complex(7d, 8d), new Complex(-8.5d, 6.5d), new Complex(9d, -3d));
                var v1 = new cvec4(new Complex(2d, -4.5d), new Complex(0.5d, 7d), new Complex(-9.5d, 6.5d), new Complex(-8.5d, 6.5d));
                var v2 = new cvec4(new Complex(-9.5d, 3.5d), new Complex(8.5d, -1.5d), new Complex(1.0, -2d), new Complex(3d, -3.5d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(9d, -3.5d), new Complex(-6.5d, 3.5d), new Complex(0.5d, -8d), new Complex(4d, -6d));
                var v1 = new cvec4(new Complex(2.5d, -4.5d), new Complex(3.5d, 3.5d), new Complex(7d, 9d), new Complex(6.5d, -6.5d));
                var v2 = new cvec4(new Complex(8.5d, 5.5d), new Complex(3d, -6d), new Complex(-4.5d, -3d), new Complex(7.5d, -4.5d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-9.5d, -9.5d), new Complex(3d, 4d), new Complex(8.5d, -9.5d), new Complex(8d, 8.5d));
                var v1 = new cvec4(new Complex(-3.5d, 2d), new Complex(4d, 9.5d), new Complex(-5d, -4d), new Complex(-4d, 9d));
                var v2 = new cvec4(new Complex(-0.5d, -3d), new Complex(4.5d, 5d), new Complex(1.0, 4.5d), new Complex(-6.5d, 9d));
                Assert.AreEqual(v0 * (v1 + v2), v0 * v1 + v0 * v2);
            }
        }

        [Test]
        public void InvariantIdNeg()
        {
            {
                var v0 = new cvec4(new Complex(1.0, 0.0), new Complex(7d, 4d), new Complex(3d, 1.5d), new Complex(-7.5d, 7d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(-4d, -9d), new Complex(-4d, -3.5d), new Complex(7.5d, 7.5d), new Complex(-9.5d, -5.5d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(5d, -4.5d), new Complex(9.5d, 0.5d), new Complex(-2.5d, -1d), new Complex(-3d, 9.5d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(-7.5d, -4.5d), new Complex(8.5d, 3.5d), new Complex(8d, 8.5d), new Complex(6.5d, 1.5d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(-1d, 1.0), new Complex(7d, 7.5d), new Complex(1.5d, -3d), new Complex(0.0, -7d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(5.5d, -6.5d), new Complex(7d, 0.5d), new Complex(5d, 8d), new Complex(-3d, -7.5d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(4d, 2d), new Complex(-9d, 8.5d), new Complex(-4.5d, -2.5d), new Complex(1.0, 5.5d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(2d, -8d), new Complex(-8d, 4.5d), new Complex(-2.5d, -8.5d), new Complex(2d, 1.5d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(-7.5d, 3.5d), new Complex(7.5d, 0.0), new Complex(-6.5d, -7.5d), new Complex(8d, -2d));
                Assert.AreEqual(v0, -(-v0));
            }
            {
                var v0 = new cvec4(new Complex(-4d, 1.0), new Complex(-3.5d, -4d), new Complex(-1.5d, -3d), new Complex(1.5d, 3d));
                Assert.AreEqual(v0, -(-v0));
            }
        }

        [Test]
        public void InvariantCommutativeNeg()
        {
            {
                var v0 = new cvec4(new Complex(6d, -7.5d), new Complex(1.5d, -6d), new Complex(-9.5d, 0.0), new Complex(-2.5d, -8.5d));
                var v1 = new cvec4(new Complex(1.5d, -1d), new Complex(-7d, -8.5d), new Complex(2.5d, -1d), new Complex(0.5d, -8.5d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(4.5d, 5d), new Complex(-5.5d, 2d), new Complex(-4d, -4.5d), new Complex(-2d, 2d));
                var v1 = new cvec4(new Complex(9.5d, -5.5d), new Complex(4d, 4d), new Complex(-1.5d, -2.5d), new Complex(-3d, 0.0));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(-9.5d, -3d), new Complex(-6.5d, 6.5d), new Complex(7d, -9.5d), new Complex(9d, 6d));
                var v1 = new cvec4(new Complex(6.5d, -1d), new Complex(-2.5d, 2d), new Complex(8.5d, 1.0), new Complex(-1.5d, -8d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(-7.5d, -9d), new Complex(-4.5d, 7d), new Complex(-3.5d, 3.5d), new Complex(1.0, 9d));
                var v1 = new cvec4(new Complex(-5.5d, -2.5d), new Complex(-9d, -2.5d), new Complex(-2d, -2.5d), new Complex(8.5d, -8d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(-8d, 5d), new Complex(-5d, 4.5d), new Complex(0.5d, 1.0), new Complex(0.5d, -2d));
                var v1 = new cvec4(new Complex(-6.5d, 2.5d), new Complex(5d, -6d), new Complex(-2.5d, -2d), new Complex(9.5d, 6.5d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(-6.5d, 8d), new Complex(-3d, -7.5d), new Complex(0.0, -2.5d), new Complex(-6d, -0.5d));
                var v1 = new cvec4(new Complex(3d, -7.5d), new Complex(-5.5d, -9d), new Complex(-2d, -9.5d), new Complex(1.0, 8d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(2d, 4.5d), new Complex(-7d, 8d), new Complex(-3.5d, -8d), new Complex(-6.5d, -5.5d));
                var v1 = new cvec4(new Complex(8d, 6d), new Complex(-5.5d, 1.5d), new Complex(0.0, -3d), new Complex(-9.5d, -9.5d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(3.5d, -4d), new Complex(1.5d, -7.5d), new Complex(5d, 0.0), new Complex(6d, 1.0));
                var v1 = new cvec4(new Complex(0.5d, -1.5d), new Complex(0.5d, 9.5d), new Complex(5d, 2.5d), new Complex(-5d, -7d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(-2d, -4d), new Complex(-6d, 7d), new Complex(3.5d, 7.5d), new Complex(-5.5d, -2.5d));
                var v1 = new cvec4(new Complex(-5d, 2d), new Complex(8.5d, -6d), new Complex(-0.5d, 8d), new Complex(-4d, 4.5d));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
            {
                var v0 = new cvec4(new Complex(6.5d, -5.5d), new Complex(7d, -5.5d), new Complex(-3.5d, 8.5d), new Complex(-6.5d, -3.5d));
                var v1 = new cvec4(new Complex(-3.5d, -3d), new Complex(-7.5d, -1d), new Complex(-5.5d, 3.5d), new Complex(8.5d, 0.0));
                Assert.AreEqual(v0 - v1, -(v1 - v0));
            }
        }

        [Test]
        public void InvariantAssociativeNeg()
        {
            {
                var v0 = new cvec4(new Complex(9.5d, 0.0), new Complex(9.5d, 9d), new Complex(5d, 6.5d), new Complex(7d, -2.5d));
                var v1 = new cvec4(new Complex(0.0, 1.0), new Complex(9d, -1.5d), new Complex(-8.5d, 0.0), new Complex(-7.5d, -8d));
                var v2 = new cvec4(new Complex(7.5d, 2.5d), new Complex(-4.5d, 1.0), new Complex(1.5d, -5d), new Complex(5d, -3.5d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(3.5d, 8.5d), new Complex(-8.5d, -9d), new Complex(4d, -3d), new Complex(3.5d, -5.5d));
                var v1 = new cvec4(new Complex(-5d, 9.5d), new Complex(-0.5d, 4.5d), new Complex(-5d, -6.5d), new Complex(-0.5d, -1d));
                var v2 = new cvec4(new Complex(-6.5d, -5.5d), new Complex(-1.5d, -2d), new Complex(2d, 1.0), new Complex(1.5d, -1.5d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(6.5d, 7d), new Complex(-3.5d, 2d), new Complex(7.5d, -3.5d), new Complex(9.5d, -8d));
                var v1 = new cvec4(new Complex(0.5d, 8.5d), new Complex(-2d, -6d), new Complex(7.5d, -3d), new Complex(-4.5d, 7.5d));
                var v2 = new cvec4(new Complex(-6.5d, -8.5d), new Complex(9.5d, 6.5d), new Complex(5.5d, 2d), new Complex(-6d, 5d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-3d, -6d), new Complex(8d, 8d), new Complex(-4d, -8d), new Complex(-0.5d, -5d));
                var v1 = new cvec4(new Complex(7d, 3.5d), new Complex(4.5d, 5.5d), new Complex(-8.5d, -8d), new Complex(-5d, 3.5d));
                var v2 = new cvec4(new Complex(6d, 7.5d), new Complex(-9.5d, 0.5d), new Complex(7d, 8d), new Complex(4.5d, -7d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(5.5d, 7.5d), new Complex(-7d, 6.5d), new Complex(3.5d, 9.5d), new Complex(9.5d, 9.5d));
                var v1 = new cvec4(new Complex(6d, 1.5d), new Complex(-5.5d, 0.0), new Complex(4d, 0.0), new Complex(-1d, -3.5d));
                var v2 = new cvec4(new Complex(7.5d, 5d), new Complex(-5d, 7d), new Complex(-2d, -9d), new Complex(-4d, 9.5d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-3d, 2d), new Complex(-8.5d, -7.5d), new Complex(1.5d, -9.5d), new Complex(-3.5d, -4d));
                var v1 = new cvec4(new Complex(-2.5d, -1.5d), new Complex(5d, -6d), new Complex(-6.5d, 5d), new Complex(4.5d, 2d));
                var v2 = new cvec4(new Complex(-3.5d, -6d), new Complex(-0.5d, 7d), new Complex(-8.5d, 6d), new Complex(6d, -0.5d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-6d, -5d), new Complex(-3.5d, 8d), new Complex(-8.5d, -6d), new Complex(-1.5d, -1.5d));
                var v1 = new cvec4(new Complex(6d, 2.5d), new Complex(-2.5d, 8d), new Complex(-5.5d, -1.5d), new Complex(-6d, -6d));
                var v2 = new cvec4(new Complex(-8d, 2.5d), new Complex(3d, 6d), new Complex(3d, -9d), new Complex(-4d, 0.0));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(-8d, -7d), new Complex(7.5d, -4d), new Complex(-9d, 3d), new Complex(9.5d, -9.5d));
                var v1 = new cvec4(new Complex(5.5d, 3.5d), new Complex(-5.5d, -4d), new Complex(-8d, 9.5d), new Complex(8.5d, 7d));
                var v2 = new cvec4(new Complex(6.5d, -0.5d), new Complex(9.5d, -9d), new Complex(-7d, -1d), new Complex(-2.5d, -1d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(3d, -4d), new Complex(5.5d, 3d), new Complex(-1.5d, 4d), new Complex(1.0, -9.5d));
                var v1 = new cvec4(new Complex(7.5d, -4.5d), new Complex(-4d, 6d), new Complex(7d, 9.5d), new Complex(6d, -1.5d));
                var v2 = new cvec4(new Complex(6.5d, 0.5d), new Complex(-2.5d, 8d), new Complex(-5.5d, -7.5d), new Complex(-8.5d, -6.5d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
            {
                var v0 = new cvec4(new Complex(2d, -7.5d), new Complex(-6d, -3d), new Complex(3d, 2.5d), new Complex(9d, 5.5d));
                var v1 = new cvec4(new Complex(0.5d, -9.5d), new Complex(6.5d, 3d), new Complex(6.5d, 7d), new Complex(8d, 3.5d));
                var v2 = new cvec4(new Complex(-8d, 0.0), new Complex(-8d, -7d), new Complex(7d, 5.5d), new Complex(0.5d, -5d));
                Assert.AreEqual(v0 * (v1 - v2), v0 * v1 - v0 * v2);
            }
        }

        [Test]
        public void TriangleInequality()
        {
            {
                var v0 = new cvec4(new Complex(5.5d, -3d), new Complex(-3.5d, -7.5d), new Complex(5d, -3d), new Complex(4d, 8d));
                var v1 = new cvec4(new Complex(-6d, -9d), new Complex(-3d, 9d), new Complex(-1.5d, -1.5d), new Complex(-5d, 1.5d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(2.5d, 6d), new Complex(-8d, -6.5d), new Complex(-2.5d, -2.5d), new Complex(8d, -4d));
                var v1 = new cvec4(new Complex(0.5d, 6d), new Complex(9d, 0.0), new Complex(-4d, 8.5d), new Complex(9.5d, 5.5d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(-5d, 8.5d), new Complex(-6.5d, 8d), new Complex(5.5d, 3d), new Complex(-6d, 6d));
                var v1 = new cvec4(new Complex(5d, -8.5d), new Complex(-9.5d, -2d), new Complex(3.5d, 4d), new Complex(8d, -3d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(0.0, 0.0), new Complex(-8.5d, -5.5d), new Complex(8d, -7d), new Complex(3.5d, 5d));
                var v1 = new cvec4(new Complex(1.5d, 2.5d), new Complex(-5d, -9d), new Complex(-6d, -8.5d), new Complex(-2.5d, -4.5d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(8.5d, -9.5d), new Complex(-7d, -8d), new Complex(-6.5d, 2.5d), new Complex(1.5d, -1d));
                var v1 = new cvec4(new Complex(7.5d, -3.5d), new Complex(4d, -6d), new Complex(5d, 5d), new Complex(5d, 9.5d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(9.5d, 8d), new Complex(-9.5d, -1d), new Complex(8d, -8d), new Complex(-5d, 5d));
                var v1 = new cvec4(new Complex(2d, -1.5d), new Complex(7.5d, 8.5d), new Complex(6.5d, 6d), new Complex(-4.5d, 2d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(1.0, -5.5d), new Complex(7d, 3.5d), new Complex(0.0, -0.5d), new Complex(-8.5d, 4.5d));
                var v1 = new cvec4(new Complex(-7d, 2d), new Complex(-6d, 3d), new Complex(4.5d, -7d), new Complex(-5d, 8.5d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(3.5d, -7d), new Complex(6.5d, 9.5d), new Complex(4d, 6d), new Complex(4.5d, 4.5d));
                var v1 = new cvec4(new Complex(3d, 1.5d), new Complex(5.5d, -6.5d), new Complex(-6.5d, 8.5d), new Complex(-7d, -3.5d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(2d, 0.0), Complex.One, new Complex(9d, 3.5d), new Complex(-3d, -3.5d));
                var v1 = new cvec4(new Complex(-3.5d, 7d), new Complex(-6.5d, -2.5d), new Complex(2d, 6d), new Complex(-1d, -8.5d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
            {
                var v0 = new cvec4(new Complex(-8d, 1.0), new Complex(-0.5d, 2d), new Complex(-6d, 7.5d), new Complex(-3.5d, 9d));
                var v1 = new cvec4(new Complex(-1d, 1.5d), new Complex(-8d, 7.5d), new Complex(5d, -6.5d), new Complex(2d, 2d));
                Assert.GreaterOrEqual(v0.NormMax + v1.NormMax, (v0 + v1).NormMax);
            }
        }

        [Test]
        public void InvariantNorm()
        {
            {
                var v0 = new cvec4(new Complex(-4d, 2.5d), new Complex(-1.5d, 7.5d), new Complex(2d, -3.5d), new Complex(7d, -1.5d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(-6.5d, 4d), new Complex(-9d, -7.5d), new Complex(3d, 5d), new Complex(2.5d, -8d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(3.5d, -1.5d), new Complex(-8d, -4.5d), new Complex(-6.5d, -5.5d), new Complex(-1.5d, 7d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(-9.5d, -6.5d), new Complex(7.5d, -8.5d), new Complex(-9d, 2.5d), new Complex(8.5d, 1.5d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(-5.5d, -1d), new Complex(3d, -8.5d), new Complex(-9d, -5.5d), new Complex(-8.5d, -1.5d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(0.5d, -7.5d), new Complex(8d, 5.5d), new Complex(6.5d, -2d), new Complex(-5.5d, 8.5d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(-3.5d, 9d), new Complex(-9d, 8d), new Complex(2.5d, -3d), new Complex(-3d, -1.5d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(6d, -4d), new Complex(-8.5d, 8.5d), new Complex(-0.5d, 0.5d), new Complex(-3d, -6d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(-7.5d, 6d), new Complex(5.5d, 4d), new Complex(6d, -1.5d), new Complex(-8.5d, 3.5d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
            {
                var v0 = new cvec4(new Complex(1.0, 5d), new Complex(-2d, -6d), new Complex(-1d, 1.0), new Complex(-9.5d, -6.5d));
                Assert.LessOrEqual(v0.NormMax, v0.Norm);
            }
        }

    }
}
